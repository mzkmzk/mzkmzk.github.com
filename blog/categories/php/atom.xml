<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: php | K]]></title>
  <link href="http://mzkmzk.github.io/blog/categories/php/atom.xml" rel="self"/>
  <link href="http://mzkmzk.github.io/"/>
  <updated>2015-11-12T14:09:14+08:00</updated>
  <id>http://mzkmzk.github.io/</id>
  <author>
    <name><![CDATA[K]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Laravel 使用deployer 简单项目搭建]]></title>
    <link href="http://mzkmzk.github.io/blog/2015/11/08/laravel_demo_start/"/>
    <updated>2015-11-08T11:37:40+08:00</updated>
    <id>http://mzkmzk.github.io/blog/2015/11/08/laravel_demo_start</id>
    <content type="html"><![CDATA[<!--more-->


<p><code>deployer</code>是后台管理模板</p>

<p><a href="https://github.com/REBELinBLUE/deployer">安装指南</a></p>

<p>安装中遇到的问题</p>

<ol>
<li><p>在<code>sudo composer install -o --no-dev</code>在出现警告</p>

<pre><code> Notice: Use of undefined constant MCRYPT_RIJNDAEL_128 - assumed 'MCRYPT_RIJNDAEL_128' in /Users/maizhikun/Learning/apache_sites/deployer/config/app.php on line 84
 PHP Notice:  Use of undefined constant MCRYPT_RIJNDAEL_128 - assumed 'MCRYPT_RIJNDAEL_128' in /Users/maizhikun/Learning/apache_sites/deployer/config/app.php on line 84
 &gt; php artisan optimize

 Notice: Use of undefined constant MCRYPT_RIJNDAEL_128 - assumed 'MCRYPT_RIJNDAEL_128' in /Users/maizhikun/Learning/apache_sites/deployer/config/app.php on line 84
 PHP Notice:  Use of undefined constant MCRYPT_RIJNDAEL_128 - assumed 'MCRYPT_RIJNDAEL_128' in /Users/maizhikun/Learning/apache_sites/deployer/config/app.php on line 84
 Generating optimized class loader
 Compiling common classes
</code></pre>

<p> 修改config/app的</p>

<pre><code> 'cipher'          =&gt; 'AES-256-CBC',
</code></pre></li>
<li><p><code>php artisan app:install</code>中出现</p>

<pre><code> ***********************
 Welcome to Deployer
 ***********************

 Extension required: mcrypt

 Deployer cannot be installed, as not all requirements are met. Please review the errors above before continuing.
</code></pre>

<p> 解决方案是: 在配置文件中加</p>

<pre><code> export PATH=/usr/local/php5/bin:$PATH
</code></pre></li>
<li><p>到了最后的设置数据库,不允许属性为空</p>

<pre><code>[ERROR] A value is required.

Username [deployer]:    
</code></pre>

<p>然而我的账号就是空啊..啊哈哈- -.</p>

<p>修改源文件<code>deployer/vendor/symfony/console/Helper/SymfonyQuestionHelper.php</code>40行附近</p>

<pre><code>//if (!is_array($value) &amp;&amp; !is_bool($value) &amp;&amp; 0 === strlen($value)) {
if (!is_array($value) &amp;&amp; !is_bool($value) &amp;&amp; 0 === strlen($value)) {
    throw new \Exception('A value is required.');
}
</code></pre>

<p>//phpstorm默认不让改的.用subline改就OK哈哈- -.</p></li>
<li><p>在创建时候缺少<code>Beanstalkd</code></p>

<pre><code>[Pheanstalk\Exception\ConnectionException]
Socket error 61: Connection refused (connecting to localhost:11300)
</code></pre>

<p>安装<code>Beanstalkd</code></p>

<pre><code>brew install beanstalkd
</code></pre>

<p>启动<code>Beanstalkd</code></p>

<pre><code>beanstalkd
</code></pre>

<p><a href="http://wppurking.github.io/rails/ruby/queue/2012/10/01/chu-shi-beanstalk.html">使用Beanstalkd参考</a></p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Laravel 使用deployer 简单项目搭建]]></title>
    <link href="http://mzkmzk.github.io/blog/2015/11/08/laravel_demo_amazeui/"/>
    <updated>2015-11-08T11:37:40+08:00</updated>
    <id>http://mzkmzk.github.io/blog/2015/11/08/laravel_demo_amazeui</id>
    <content type="html"><![CDATA[<!--more-->


<p><code>amazeui</code>是后台管理模板</p>

<p><a href="https://github.com/iroben/laravel5-amazeui-admin">安装指南</a></p>

<p>安装中遇到的问题</p>

<ol>
<li><p>缺少<code>bower</code></p>

<pre><code> //安装
 npm install -g bower

 //安装后出现权限问题
 sudo chmod -R  777 ../configstore/
</code></pre></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubantu 安装Laravel]]></title>
    <link href="http://mzkmzk.github.io/blog/2015/11/04/ubuntu_laravel/"/>
    <updated>2015-11-04T11:37:40+08:00</updated>
    <id>http://mzkmzk.github.io/blog/2015/11/04/ubuntu_laravel</id>
    <content type="html"><![CDATA[<!--more-->


<p>Ubuntu版本 :14.04</p>

<h1>1 安装apche mysql php</h1>

<ol>
<li><p>安装apache<code>sudo apt-get install apache2</code></p>

<p> <code>localhost</code>有apache页面显示即可</p></li>
<li><p>安装php<code>sudo apt-get install php5 libapache2-mod-php5</code></p>

<pre><code> //重启apache 加载php模块
 sudo service apache2 restart
</code></pre>

<p> 新增<code>sudo vim /var/www/html/php_info.php</code>,输入内容</p>

<pre><code> &lt;?php  
     phpinfo();  
 ?&gt;  
</code></pre>

<p> 浏览器输入<code>localhost/php_info.php</code>,浏览到php配置信息即为正确.</p></li>
<li><p>安装MySQL<code>sudo apt-get install mysql-server mysql-client</code></p>

<p> 过程中设置MySQL密码请谨记</p></li>
<li><p>安装phpmyadmin<code>sudo apt-get install phpmyadmin</code></p>

<p> 过程中设置服务器类型和phpmyadmin密码</p>

<p> phpmyadmin安装完后，并不在apache默认路径下，需要建立一个链接，</p>

<pre><code> sudo ln -s /usr/share/phpmyadmin /var/www/html
</code></pre>

<p> 访问<code>localhost/phpmyadmin/</code>即可.</p></li>
</ol>


<p><a href="http://blog.csdn.net/tecn14/article/details/27515241">参考链接</a></p>

<h1>2 安装Laravel</h1>

<p>参考之前写的文章<a href="http://mzkmzk.github.io/blog/2015/09/24/Laravel-start/">http://mzkmzk.github.io/blog/2015/09/24/Laravel-start/</a></p>

<h1>3 更改apache</h1>

<ol>
<li><code>sudo a2enmod rewrite</code>加载重定向模块</li>
<li><code>/etc/apche2/apache.conf</code>里的所有<code>AllowOverride None</code>修改为<code>AllowOverride All</code></li>
<li>重启服务器</li>
</ol>


<h1>附录小问题</h1>

<ol>
<li>修改用户密码<code>passwd username</code></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Laravel 小技巧]]></title>
    <link href="http://mzkmzk.github.io/blog/2015/11/04/laravel_kill/"/>
    <updated>2015-11-04T11:37:40+08:00</updated>
    <id>http://mzkmzk.github.io/blog/2015/11/04/laravel_kill</id>
    <content type="html"><![CDATA[<!--more-->


<h1>1 基本函数</h1>

<ol>
<li><code>return redirect(地址)</code>在route中设置重定向.</li>
</ol>


<h1>2 定义全局自定义函数</h1>

<ol>
<li>创建app/Utils/Utils.php,里面直接放方法</li>
<li><p>修改项目 composer.json</p>

<pre><code>     "autoload": {
     ...
         "files": [
             "app/Utils/Utils.php"
         ]
     ... 
     },
</code></pre></li>
<li><p>命令行运行<code>composer dump-autoload</code>,ok</p></li>
</ol>


<p><a href="http://laravel.so/tricks/e81a15277236d35feb19ad5b86427bdc">参考</a></p>

<h1>3 Blade显示数据为字符串</h1>

<pre><code> var cases = {!!$cases!!};
 alert();

 //页面显示
  var cases = [{"id":62,"created_at":"2015-11-10 04:38:46","updated_at":"2015-11-10 04:38:46","title":"4353","subhead":"534543","address":"534534","description":"","type":1,"logo":"","post_at":"0000-00-00 00:00:00","deleted_at":null}];
  //alert([{&amp;quot;id&amp;quot;:62,&amp;quot;created_at&amp;quot;:&amp;quot;2015-11-10 04:38:46&amp;quot;,&amp;quot;updated_at&amp;quot;:&amp;quot;2015-11-10 04:38:46&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;4353&amp;quot;,&amp;quot;subhead&amp;quot;:&amp;quot;534543&amp;quot;,&amp;quot;address&amp;quot;:&amp;quot;534534&amp;quot;,&amp;quot;description&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;type&amp;quot;:1,&amp;quot;logo&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;post_at&amp;quot;:&amp;quot;0000-00-00 00:00:00&amp;quot;,&amp;quot;deleted_at&amp;quot;:null}]);  
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Laravel Seeders]]></title>
    <link href="http://mzkmzk.github.io/blog/2015/11/03/laravel_seeders/"/>
    <updated>2015-11-03T11:37:40+08:00</updated>
    <id>http://mzkmzk.github.io/blog/2015/11/03/laravel_seeders</id>
    <content type="html"><![CDATA[<!--more-->


<h1>0 目的</h1>

<p>建立好数据库以后,就是要建立测试数据看效果如何.</p>

<h1>1 初体验</h1>

<ol>
<li><p>开始入门吧</p>

<p> 首先我是基于<code>Eloquent</code>开发的.</p>

<p> 1.1 添加ModelFactory</p>

<p> <code>./database/factyories/ModelFactory.php</code>里定义模拟数据</p>

<pre><code> $factory-&gt;define(App\Models\Institute_Model::class, function (Faker\Generator $faker) {
     return [
     'name' =&gt; $faker-&gt;name,
     ];
 });     
</code></pre>

<p> <code>$faker</code>是一个模拟数据的框架,<a href="https://github.com/fzaninotto/Faker">更多玩法</a></p>

<pre><code> //主要方法
 'code' =&gt; $faker-&gt;swiftBicNumber, //FCDNOFCFHST
 'name' =&gt; $faker-&gt;firstName, //Lynn
 'type' =&gt; $faker-&gt;numberBetween(0,3),
</code></pre>

<p> 1.2 添加Seeder,配置Model</p>

<pre><code> K:HapLab_Laravel maizhikun$ php artisan make:seeder User_Seeder
 Seeder created successfully.
</code></pre>

<p> 后会在<code>./database/seeds</code>创建一个User_Seeder文件</p>

<pre><code> class User_Seeder extends Seeder
 {
     public function run()
     {
         //
     }
 }
</code></pre>

<p> 然后在<code>run()</code>方法里配置上填充的Model数据</p>

<pre><code> public function run()
 {
     factory(App\Models\User_Model::class, 50)-&gt;create();
 }
</code></pre>

<p> 1.3 执行Seeder</p>

<pre><code> K:HapLab_Laravel maizhikun$ php artisan db:seed --class=User_Seeder
</code></pre>

<p> note :或在<code>./database/seeds/DatabaseSeeder</code>里配置多个Seeder,然后执行&#8217;php artisan db:seed&#8217;</p>

<pre><code> class DatabaseSeeder extends Seeder
 {
     public function run()
     {
         Model::unguard();

         $this-&gt;call(User_Seeder::class);

         Model::reguard();
     }
 }   
</code></pre></li>
<li><p>玩一玩有外键的玩法</p>

<p> 基本和入门玩法一样,不过需要遍历循环主表</p>

<pre><code>   public function run()
 {
     factory(App\Models\Institute_Model::class,21)-&gt;create()-&gt;each(function($institute){
         $institute-&gt;patients()-&gt;save(factory(App\Models\User_Model::class)-&gt;make());
     });
 }  
</code></pre></li>
<li><p>蜀黍,要是表中有多个外键怎么破.</p>

<p> 这时候就要到ModelFactory里修改了</p>

<pre><code> $factory-&gt;define(App\Models\Disease_Item_Type_Model::class, function (Faker\Generator $faker) {
     //获取外键可能的值,这里代码可以诱惑,用单例模式,不然每条数据都会获取一遍外键可的值.
     $id = get_all_id(new \App\Models\Disease_Type_Model());
     return [
         'disease_type_ID' =&gt; $faker-&gt;randomElement($id),
         'code' =&gt; $faker-&gt;swiftBicNumber,
         'name' =&gt; $faker-&gt;firstName,
     ];
 });
</code></pre>

<p> 上述代码中,<code>get_all_id</code>是获取外键的所有可能的值的方法.代码如下</p>

<pre><code> function get_all_id(\App\Models\Base_Model $base_Model){
     $model_datas = $base_Model-&gt;all();
     $model_id = array();
     foreach($model_datas as $model_data){
         array_push($model_id,$model_data['id']);
     }
     return $model_id;
 }   
</code></pre></li>
</ol>


<h3>其他问题</h3>

<ol>
<li><p>创建图片数据时,无法写目录,原因可能是路径问题,直接设定绝对路径即可</p>

<pre><code> //提示错误(Cannot write to directory "./Images"
 'url' =&gt; $faker-&gt;image(  '/Images','635','420')

 //改为
 'url' =&gt; $faker-&gt;image( base_path("public") . '/Images','635','420')
</code></pre>

<p> 虽然没报错,但是可能由于网络原因,增加极慢,弃之.</p></li>
</ol>

]]></content>
  </entry>
  
</feed>
