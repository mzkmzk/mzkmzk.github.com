<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 前端 | K]]></title>
  <link href="http://mzkmzk.github.io/blog/categories/qian-duan/atom.xml" rel="self"/>
  <link href="http://mzkmzk.github.io/"/>
  <updated>2015-11-19T08:50:09+08:00</updated>
  <id>http://mzkmzk.github.io/</id>
  <author>
    <name><![CDATA[K]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[jssor轮播图的使用和修改]]></title>
    <link href="http://mzkmzk.github.io/blog/2015/11/08/update_slider/"/>
    <updated>2015-11-08T11:37:40+08:00</updated>
    <id>http://mzkmzk.github.io/blog/2015/11/08/update_slider</id>
    <content type="html"><![CDATA[<!--more-->


<p>这里使用下<code>jssor</code>的轮播,<a href="https://github.com/jssor/slider">github地址</a>.优势是支持手动滑动,响应式和键盘左右监听.很人性.</p>

<p><img src="/images/QQ20151108-2.png" alt="一开始是这样的" /></p>

<p>任务</p>

<ol>
<li><p>改变光标,一开始为可移动的手势,改为默认的鼠标</p>

<pre><code> $("#case_big_slider div").css("cursor","default");
</code></pre></li>
<li><p>宽度100%,调整左右两图显示的大小</p>

<pre><code> //设置屏幕宽度为document宽度
 jssor_slider1.$ScaleWidth(Math.min(parentWidth, $(document).width()));
</code></pre>

<p> 接下来设置整个轮播图的宽高比,一开始的div设置</p>

<pre><code> &lt;div id="slider1_container" style="position: relative; top: 0px; left: 0px; width: 800px;
 height: 300px; overflow: hidden;"&gt;
     &lt;!-- Slides Container --&gt;
     &lt;div u="slides" style="position: absolute; left: 0px; top: 0px; width: 800px; height: 300px;
     overflow: hidden;"&gt;
         &lt;div&gt;&lt;img u="image" src="../Assets/Images/Case_Slider_01.png" /&gt;&lt;/div&gt;
         &lt;div&gt;&lt;img u="image" src="../Assets/Images/Case_Slider_01.png" /&gt;&lt;/div&gt;
         &lt;div&gt;&lt;img u="image" src="../Assets/Images/Case_Slider_01.png" /&gt;&lt;/div&gt;
         &lt;div&gt;&lt;img u="image" src="../Assets/Images/Case_Slider_01.png" /&gt;&lt;/div&gt;
         &lt;div&gt;&lt;img u="image" src="../Assets/Images/Case_Slider_01.png" /&gt;&lt;/div&gt;
         &lt;div&gt;&lt;img u="image" src="../Assets/Images/Case_Slider_01.png" /&gt;&lt;/div&gt;

     &lt;/div&gt;
</code></pre>

<p>应该很少在div设置固定宽高的,研究发现,其实起的是设置宽高比作用.多少px是无所谓的.</p>

<p>这里由于我要的效果是在1440时,高度为381,所以width设置为1440,height设置为381.就完成了设置宽高比.</p>

<p>该框架默认,左右两边的图只显示100px,但我需要显示为屏幕的百分27%</p>

<pre><code> $ParkingPosition: $(document).width() * 0.27,          
</code></pre></li>
<li><p>更改左右两个图片位置和显示</p>

<p> 原来</p>

<pre><code> &lt;span u="arrowleft" class="jssora13l glyphicon glyphicon-menu-left" style="top: 123px; left: 30px;"&gt;
</code></pre>

<p> 我要改为屏幕边向左右20%,和改变显示图标</p>

<pre><code> &lt;span u="arrowright" class="jssora13r glyphicon-right" style="top: 123px; right: 20%;"&gt;
         &lt;img  src="../Assets/Images/Slider_Line.png"/&gt;
 &lt;/span&gt;
</code></pre></li>
</ol>


<p>最终效果</p>

<p><img src="/images/QQ20151108-0.png" alt="最终效果" /></p>

<h1>附录原代码</h1>

<p>原来的配置文件.</p>

<pre><code> jQuery(document).ready(function ($) {
    var options = {
        $AutoPlay: true,

        $PauseOnHover: 1,                               //[Optional] Whether to pause when mouse over if a slideshow is auto playing, default value is false

        $ArrowKeyNavigation: true,                          //Allows arrow key to navigate or not, default value is true
        $SlideWidth: 600,                                   //[Optional] Width of every slide in pixels, the default is width of 'slides' container
        //$SlideHeight: 300,                                  //[Optional] Height of every slide in pixels, the default is width of 'slides' container
        $SlideSpacing: 0,                                   //Space between each slide in pixels
        $DisplayPieces: 2,                                  //Number of pieces to display (the slideshow would be disabled if the value is set to greater than 1), the default value is 1
        $ParkingPosition: 100,                                //The offset position to park slide (this options applys only when slideshow disabled).

        $ArrowNavigatorOptions: {                       //[Optional] Options to specify and enable arrow navigator or not
            $Class: $JssorArrowNavigator$,              //[Requried] Class to create arrow navigator instance
            $ChanceToShow: 2,                               //[Required] 0 Never, 1 Mouse Over, 2 Always
            $AutoCenter: 2,                                 //[Optional] Auto center arrows in parent container, 0 No, 1 Horizontal, 2 Vertical, 3 Both, default value is 0
            $Steps: 1                                       //[Optional] Steps to go for each navigation request, default value is 1
        }
    };

    var jssor_slider1 = new $JssorSlider$("slider1_container", options);

    //responsive code begin
    //you can remove responsive code if you don't want the slider scales while window resizes
    function ScaleSlider() {
        var parentWidth = jssor_slider1.$Elmt.parentNode.clientWidth;
        if (parentWidth)
            jssor_slider1.$ScaleWidth(Math.min(parentWidth, 800));
        else
            window.setTimeout(ScaleSlider, 30);
    }
    ScaleSlider();

    $(window).bind("load", ScaleSlider);
    $(window).bind("resize", ScaleSlider);
    $(window).bind("orientationchange", ScaleSlider);
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[疯狂Html+CSS+JS 中HTML5总结]]></title>
    <link href="http://mzkmzk.github.io/blog/2015/10/24/amazeing-html5/"/>
    <updated>2015-10-24T11:37:40+08:00</updated>
    <id>http://mzkmzk.github.io/blog/2015/10/24/amazeing-html5</id>
    <content type="html"><![CDATA[<!--more-->


<h1>0总结</h1>

<h1>1. HTML5简介</h1>

<p>HTML:Hyper Text Markup Language.(How To Make Love - -.)</p>

<p>标记H5.</p>

<pre><code>&lt;!DOCTYPE html&gt;
</code></pre>

<p>作者的愤怒.</p>

<pre><code>不要再&lt;html&gt;和&lt;head&gt;、&lt;/head&gt;和&lt;body&gt;还有&lt;/body&gt;和&lt;/html&gt;插任何内容.      
</code></pre>

<p>验证HTML是否符合规范<a href="http://validator.w3.org/">http://validator.w3.org/</a>.</p>

<h1>2. HTML5常用标签和属性.</h1>

<h2>2.1 HTML常用属性</h2>

<h3>2.1.1文本格式化元素</h3>

<ol>
<li><code>&lt;i&gt;:</code> 斜体.</li>
<li><code>&lt;em&gt;:</code> 强调文本.</li>
<li><code>&lt;strong&gt;|&lt;b&gt;:</code> 粗体.</li>
<li><code>&lt;small&gt;:</code> 小号字体.</li>
<li><code>&lt;sup&gt;:</code> 上标</li>
<li><code>&lt;sub&gt;:</code> 下标</li>
<li><code>&lt;bdo&gt;:</code> 文本方向 设定属性dir为ltr/rtl(反着来)</li>
</ol>


<h3>2.1.2 语义相关元素</h3>

<ol>
<li><code>&lt;abbr&gt;:</code> 表示缩写,可定义title,表示全写,鼠标移上去会显示一次title.</li>
<li><code>&lt;address&gt;:</code> 表示地址,会斜体显示.</li>
<li><code>&lt;blockquote&gt;:</code> 表示定义引用很长的文本,会缩进显示,属性有cite指定该文应用的url.</li>
<li><code>&lt;q&gt;:</code> 定义短的引用文本.</li>
<li><code>&lt;cite&gt;:</code> 表示作品(书,电影,歌曲).</li>
<li><code>&lt;code&gt;:</code> 表示代码.</li>
<li><code>&lt;dfn&gt;:</code> 定义专业术语,一般会粗体/斜体显示.</li>
<li><code>&lt;del&gt;</code>: 表示删除的文本,一般会中画线显示.</li>
<li><p><code>&lt;ins&gt;:</code> 定义文档插入的文本,一般会下画线显示.</p>

<p> del和ins结合使用有文档修订的效果,这两个属性都有cite定义一个url解释删除/插入的原因,datetime表示删除/插入的时间.</p></li>
<li><p><code>&lt;pre&gt;:</code> 表示元素内已经预格式化了,该标签内的空格 回车 tab和其他格式的字符都会比保留下来.</p></li>
<li><code>&lt;samp&gt;:</code> 用于定义示范文本内容.</li>
<li><code>&lt;var&gt;:</code> 定义变量,一般斜体显示.</li>
</ol>


<h3>2.1.3 超链接和描点</h3>

<p>a标签属性</p>

<ol>
<li><p>href: 关联资源.</p>

<p> 语法规则<code>scheme://host.domain:port/path/filename</code></p>

<p> scheme(因特网服务类型): 常见有https http file ftp.还有</p>

<pre><code> 1. news: 访问新闻组上的文件.

 2. telnet: 访问Telnet连接.

 3. gopher: 访问远程Gopher服务器上的文件.

 4. mailto: 发送邮件
</code></pre>

<p> host: 指定此域中的主机,HTTP默认主机为www.</p></li>
<li><p>target: 如何显示关联资源</p>

<p> 2.1 _self: 自身.</p>

<p> 2.2 _blank: 新窗口.</p>

<p> 2.3 _top: 顶层框架 一般用于含有iframe等标签的时候使用.</p>

<p> 2.4 _parent: 父层显示.</p></li>
<li><p>media: 指定媒体类型(HTML5新增).</p></li>
<li>name: 命名描点.<code>&lt;a name="K"&gt;</code>.</li>
</ol>


<h3>2.1.4 列表相关元素</h3>

<ol>
<li><code>&lt;ul&gt;:</code> 无序列表.</li>
<li><p><code>&lt;ol&gt;:</code> 有序列表.</p>

<p> 2.1 start: 起始数字 1/A等.</p>

<p> 2.2 reversed: 反着排序.</p></li>
<li><p><code>&lt;li&gt;:</code> 列表项.</p></li>
<li><code>&lt;dl&gt;:</code> 定义列表.</li>
<li><code>&lt;dt&gt;:</code> 标题列表项.</li>
<li><code>&lt;dd&gt;:</code> 定义普通列表项.</li>
</ol>


<h3>2.1.5 图像相关属性</h3>

<p>img新增usemap属性.</p>

<ol>
<li><code>&lt;map&gt;:</code> 定义图片映射,包含多个<code>&lt;area&gt;</code>.</li>
<li><p><code>&lt;area&gt;:</code> 定义图片映射区域.特殊属性有</p>

<p> 2.1 shape: 默认为rect 还有circle和ploy属性.</p>

<p> 2.2 coords: 多个坐标,确定区域位置.</p>

<p> 2.3 href: 链接资源.</p>

<p> 2.4 alt: 提供图片信息.</p>

<p> 2.5 target.</p>

<p> 2.6 media.</p></li>
</ol>


<p>例子:</p>

<pre><code>&lt;img usemap="#test" .../&gt;

&lt;map name="test" id="test"&gt;
    &lt;area shape="cicle" coords="57,55,25" href...&gt;
    &lt;area shape="poloy" coords="188,28,185,50,200,74,244,72,246,51 ..."&gt;
&lt;/map&gt;  
</code></pre>

<h3>2.1.6 表格相关属性</h3>

<ol>
<li><code>&lt;caption&gt;:</code> 定义表格标题,智能包含文本 图片 超链接 文本格式元素 和表单控件.</li>
<li><code>&lt;colgroup&gt;:</code> 此标签智能包含在<code>&lt;table&gt;/&lt;colgroup&gt;</code>中,用来包含多个<code>&lt;col&gt;</code></li>
<li><code>&lt;col&gt;</code>: 用于指定一列或多列的样式.span属性控制控制几列.</li>
<li><code>&lt;thead&gt;:</code> 定义表格头.</li>
<li><code>&lt;tbody&gt;:</code> 定义表格体智能直接包含<code>&lt;tr&gt;</code>.</li>
<li><code>&lt;tfoot&gt;:</code> 定义表格腿.</li>
<li><code>&lt;tr&gt;</code>: 一行</li>
<li><code>&lt;th&gt;:</code> 定义页眉单元格.</li>
<li><p><code>&lt;td&gt;:</code>单元格,属性有:</p>

<p> 9.1 colspan: 单元格夸几列</p>

<p> 9.2 rowspan: 单元格夸几行</p></li>
</ol>


<p>例子</p>

<pre><code>&lt;!-- 书名列宽为160px 作者和价格列宽度为100px --&gt;
&lt;table&gt;
    &lt;caption&gt;标题&lt;/caption&gt;
    &lt;colgroup&gt;
        &lt;col style="width :160px"&gt;
        &lt;col span="2" style="width:100px"&gt;
    &lt;/colgroup&gt; 
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;书名&lt;/th&gt;
            &lt;th&gt;作者&lt;/th&gt;
            &lt;th&gt;价格&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tr&gt;
        &lt;td&gt;程序员把妹&lt;td/&gt;
        &lt;td&gt;K&lt;td/&gt;
        &lt;td&gt;1024&lt;td/&gt;
    &lt;/tr&gt;
    ...
    &lt;tfoot&gt;
        &lt;tr&gt;
            &lt;td&gt;现总计: 2本图书&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tfoot&gt;
</code></pre>

<h3>2.1.7 HTML5新增通用属性</h3>

<ol>
<li>contentEditable属性: 此值为true,组件可随意编辑.可继承.</li>
<li>isContetnEditable属性: 若处于可编辑状态,返回true.</li>
<li>designMode: 默认为off 设为on时,真个页面都可编辑(和在body设置contentEditable为true类似).</li>
<li>spellcheck: 当true时,用户输入的内容会进行单词拼接检查.</li>
<li>hidden: true/false,其实不建议用,样式还是给CSS控制吧.</li>
</ol>


<h2>2.2 HTML5 新增常用元素</h2>

<h3>2.2.1 文档结构元素</h3>

<p>此类元素其实只负责分块,其实无实际作用.只是友好提示程序员这是一块内容.</p>

<ol>
<li><code>&lt;article&gt;:</code> 用于展示一个整体内容,一篇文章 一条回复等.</li>
<li><code>&lt;nav&gt;:</code> 导航栏(边导航,页面导,底部导)标签.</li>
<li><code>&lt;header&gt;:</code> 页面顶部.</li>
<li><code>&lt;hgroup&gt;:</code> 定义多个标题时</li>
<li><code>&lt;section&gt;:</code> 内容分块.可设置cite属性.</li>
<li><code>&lt;aside&gt;:</code> 专门用于定义当前页面的附属信息,一般用作侧边栏.一般放在<code>&lt;footer&gt;</code>之前.</li>
<li><code>&lt;figure&gt;:</code> 用于一块图片区域,可包含一个<code>&lt;figcaption&gt;</code></li>
<li><code>&lt;figcaption&gt;:</code> 作为图片区域的标题.</li>
<li><code>&lt;footer&gt;</code>: 底部.</li>
</ol>


<h3>2.2.2 语义相关元素</h3>

<ol>
<li><code>&lt;mark&gt;:</code> 重点关注内容</li>
<li><code>&lt;time&gt;:</code> 指定时间,里面应该包含一个<code>datetime</code>属性指定符合<code>yyyy-MM-ddTHH:mm</code>格式的时间</li>
<li><code>&lt;details&gt;:</code>  用于展示某个主题的时间,可包含<code>&lt;summary&gt;</code>使用.</li>
<li><code>&lt;summary&gt;:</code> 作为details的摘要元素.</li>
</ol>


<h3>2.2.3 特殊功能的元素</h3>

<ol>
<li><p><code>&lt;meter&gt;:</code>用于表示一个已知最大值和最小值的计数仪表,属性皆可浮点</p>

<p> 1.1 value: 当前值.</p>

<p> 1.2 min: 最小值.</p>

<p> 1.3 max: 最大值.</p>

<p> 1.4 low: 指定范围的最小值.</p>

<p> 1.5 high: 指定范围的最小值.</p>

<p> 1.6 optimum: 指定有效范围的最佳值,若大于high,表示当前值越大越好,若小于low,则表示当前值越少越好.</p></li>
<li><p><code>&lt;progress&gt;:</code> 用于表示一个进度条.</p>

<p> 2.1 max: 进度条完成时的值.</p>

<p> 2.2 value: 当前值.</p></li>
</ol>


<h2>2.3 HTML5 头部和元数据</h2>

<ol>
<li><p><code>&lt;base&gt;:</code> 相对地址取的是此base的href,而非url.绝好放在head的头元素.</p>

<p> 1.1 href: 指定相对地址</p>

<p> 1.2 target: 默认打开链接方式</p></li>
<li><p><code>&lt;meta&gt;:</code> 指定页面元信息.</p>

<p> 2.1 name: 可为:</p>

<pre><code> 2.1.1 author: 作者        
 2.1.2 description: 简述 
 2.1.3 keywords: 关键词 
 2.1.4 generator: 说明生成工具,如`Microsoft FrontPage 4.0`等
     &lt;meta name=”generator” Content=”PCDATA|FrontPage|”&gt;

 2.1.5 revised: 定义网页版本
     &lt;meta name=”revised” content=”David, 2008/8/8/” /&gt;

 2.1.6 robots: 给机器人(搜索引擎)做登陆参考,可同时设多个属性逗号分隔

     2.1.6.1 all：默认,文件将被检索，且页面上的链接可以被查询(和 "index,follow"作用一样) 
     2.1.6.2 none：文件将不被检索，且页面上的链接不可以被查询(和 “noindex, no follow” 起相同作用)
     2.1.6.3 index：文件将被检索；（让robot/spider登录）
     2.1.6.4 follow：页面上的链接可以被查询；
     2.1.6.5 noindex：文件将不被检索
     2.1.6.6 nofollow：页面上的链接不可以被查询

 2.1.7 others: - -....   
 2.1.8 viewport: 优化移动浏览器显示,。如果不是响应式网站，不要使用initial-scale或者禁用缩放。大部分4.7-5寸设备的viewport宽设为360px；5.5寸设备设为400px；iphone6设为375px；ipone6 plus设为414px。

     &lt;meta name="viewport" content="width=device-width, initial-scale=1.0,maximum-scale=1.0, user-scalable=no"/&gt;
     &lt;!-- `width=device-width` 会导致 iPhone 5 添加到主屏后以 WebApp 全屏模式打开页面时出现黑边  --&gt;

     width：宽度（数值 / device-width）（范围从200 到10,000，默认为980 像素）
     height：高度（数值 / device-height）（范围从223 到10,000）
     initial-scale：初始的缩放比例 （范围从&gt;0 到10）
     minimum-scale：允许用户缩放到的最小比例
     maximum-scale：允许用户缩放到的最大比例
     user-scalable：用户是否可以手动缩 (no,yes)
     minimal-ui：可以在页面加载时最小化上下状态栏。（已弃用）
</code></pre>

<p> 2.2 http-equiv 属性主要有</p>

<pre><code> 2.2.1 expries: 指定网页过期时间,过期必须冲浏览器重新下载
 2.2.2 pragma: 值可为no-cache,不适用缓存
 2.2.3 refresh: 指定多长时间自动刷新页面
 2.2.3 set-cookie: 设定Cookie
 2.2.4 content-type: 指定网页内容类型和字符集.

     &lt;meta http-equiv="Content-Type" content="text/html charset=utf-8"&gt;
</code></pre>

<p> 2.3 scheme 指定用来翻译属性值的方案</p></li>
</ol>


<p><code>&lt;meta&gt;</code>参考链接<a href="http://segmentfault.com/a/1190000002407912">http://segmentfault.com/a/1190000002407912</a>非常详细!、<a href="http://www.hujuntao.com/web/html/html-meta-tag.html">http://www.hujuntao.com/web/html/html-meta-tag.html</a></p>

<h2>2.4 HTML5 新增拖放API</h2>

<h3>2.4.1 拖放事件</h3>

<p>不知道你有没有发现&hellip;网页的img和a(设置了href)的标签都是可以拖动的.对于其他标签,只要设定<code>draggable="true"</code>即可拖放.标签中含有相关的触发事件</p>

<pre><code>1. ondragstart: 开始拖动触发
2. ondrag: 拖动过程不断触发
3. ondrageend: 拖动结束触发
4. ondragenter: 当拖动的元素进入本元素后触发的时间
5. ondragover: 当拖动的元素在本元素范围内将不断触发
6. ondragleave: 拖动的元素离开本元素时触发
7. ondrop: 其他元素放到本元素时触发该时间

//实现拖动一个div随意放

//取消默认事件 每个浏览器不一样.
document.ondragover =function(evt){
    //取消默认事件
    evt.preventDefault();
}

document.ondrop = function(evt){
    //取消默认事件
    evt.preventDefault();
    source.style.position = "absolute";
    source.style.left = evt.pageX+"px";
    source.style.top = evt.pageY +"px";


}
</code></pre>

<h3>2.4.2 DataTransfer对象</h3>

<p>拖放事件中的参数中有一个dataTransfer属性.该属性的方法有</p>

<ol>
<li>dropEffect: 设置或返回拖放目标上允许的拖放行为,属性值有<code>none(拖动元素不能放到本元素中)</code>,<code>copy</code>,<code>link</code>,<code>move</code>之一.且行为需要是effectAllowed中允许的行为</li>
<li>effectAllowed: 设置或返回被拖动元素允许发生的拖动行为,属性有<code>none(不允许拖动本元素)</code>,<code>copy</code>,<code>link</code>,<code>move</code>,<code>copyLink</code>,还有<code>copyMove</code>,<code>linkMove</code>,<code>all</code>和<code>uninitalized</code></li>
<li>items: 返回DataTransferItems对象,该对象代表了拖放数据.</li>
<li><p>setDragImage(element,x,y): element代表指定的元素,x表示图标与鼠标的水平距离,y代表纵向距离.</p>

<pre><code> //eg
 var K_Icon =document.createElement("img");
 K_Icon.src ="K.gif";

 被拖动元素.ondragestart =function(evt) {
     evt.dataTransfer.setDragImage(K_Icon,0,0);
 }
</code></pre></li>
<li><p>addElement(element): 添加自定义图标.</p></li>
<li>types: 该属性返回一个DOMStringList对象,包含了dataTransfet中所有数据类型</li>
<li>getData(format): 获取DataTransfer对象中的format格式的数据.</li>
<li>setData(format,data): 设置DataTransfer对象中格式为format的data数据.</li>
<li>clearData([format]): 清楚指定format格式数据,省略则全部删除.     <br/>
一般监听ondragstart来把数据放入DataTransfer中,监听ondrop取数据.</li>
</ol>


<p>下面代码代表页面元素拖入收藏夹的部分功能实现.</p>

<pre><code>&lt;div draggable="true" ondragstart="K(event)";&gt;...
&lt;div id="Mark_Div" draggable="true" ondrop="mark(evt)" ;&gt;...

var K = function(evt) {
    evt.dataTransfer.setData("text/plain","&lt;item&gt;"+evt.target.innerHTML);
}

var mark = function(evt){
    var text =evt.dataTransfer.getData("text/plain");
    //如果以&lt;item&gt;开头
    if (text.indexOf("&lt;item&gt;") == 0 ){
        var New_Div = document.createElement("div");
        New_Div.id =new Data().getUTCMilliseconds();
        New_Div.innerHTML = text.substring(6);
        document.getElementById("Mark_Div").appendChild(New_Div);
    }
}
</code></pre>

<h1>3 HTML5表单</h1>

<p>这里列举部分form表单属性</p>

<ol>
<li><p>enctype: 指定表单内容进行编码时候的字符集.</p>

<p> 1.1 application/x-www-form-urlencoded: 默认</p>

<p> 1.2 multipart/form-data: 二进制流 一般上传文件时使用</p>

<p> 1.3 text/plain 当表单的action为<code>mailto:URL</code> 发送邮件时,采用这种方式可能比较方便</p></li>
<li><p>target: 表单也可以设置target.</p></li>
</ol>


<p>表单控件设置了disabled时,不提交此参数.</p>

<p>表单控件有tabIndex属性,值为1,2,3&hellip;,按Tab按此顺序跳动.</p>

<h2>3.1 form表单的一些标签</h2>

<ol>
<li><p><code>&lt;label...&gt;</code>: 和控件关联.</p>

<p> 1.1 隐式调用: 使用for属性关联控件的ID</p>

<p> 1.2 显式调用: 用<code>&lt;label&gt;框住表单控件&lt;/label&gt;</code></p></li>
<li><p><code>&lt;select&gt;</code>: 下拉列表/列表框</p>

<p> 2.1 multiple: 指定可多选.</p>

<p> 2.2 size: 列表框可以显示几条数据.</p>

<p> 2.3 <code>&lt;optgroup&gt;:</code> 指定选项组, 必须定义lable属性.只能包含<code>&lt;option&gt;</code></p></li>
</ol>


<h2>3.2 HTML5新增的表单控件玩法</h2>

<ol>
<li>form: 该属性指定为form表单的id,及时该控件不在form表单内,也会随form提交.</li>
<li>formaction: 一个表单若要两个提交按钮要提交到不同的地方,在提交控件中设置不同的formaction即可.</li>
<li>formxxxx属性: 和formaction类似,为提交按钮设置不同的<code>formenctype</code>,<code>formmethod</code>,<code>formtarget</code>等.</li>
<li>autofocus: 当打开一个页面时,这个控件自动获取焦点.</li>
<li>placeholder: 提示功能,在文本框内显示提示信息,开始输入时消失.</li>
<li>list: list指定<code>&lt;datalist&gt;</code>标签中的ID,<code>&lt;datalist&gt;</code>的使用方法和select完全一样,当文本控件获取焦点时,这个<code>&lt;datalist&gt;</code>定义的下拉列表显示在文本框下.</li>
<li>autocomplete: 与list结合使用,当此属性为on,list属性起作用,为off,list属性失效.然而这并没有什么卵用.</li>
</ol>


<h3>3.2.1 input标签的type的新选项值</h3>

<ol>
<li>color: 生成一个颜色选择器.</li>
<li>date: 生成日期选择器.</li>
<li>time: 生成一个时间选择器.</li>
<li>datetime: 让生成一个UTC日期、时间选择器.</li>
<li>datetime-local: 生成一个当地的日期、时间选择器.</li>
<li>week: 生成一个第几周选择器.</li>
<li>month: 生成一个月份选择器.</li>
<li>email: 生成一个校验邮件的控件,当type=&ldquo;email&#8221;时,可指定multiple属性,表示允许输入多个email.</li>
<li>tel: 输入电话的文本框,并不怎么校验.</li>
<li>url: 校验url的文本框.</li>
<li>number: 只让输入数字的文本框.</li>
<li>range: 进度条,当type=range时候,可值得属性有<code>min</code>,<code>max</code>,<code>step(指定拖动条步长)</code>.</li>
<li>search: 输入搜索关键字,其实也并没什么卵用.</li>
</ol>


<h3>3.2.2 HTML5新增表单控件</h3>

<ol>
<li><code>&lt;output&gt;</code>: 输出变量,但不会随表单提交.</li>
</ol>


<h3>3.2.3 HTML5增强文件上传</h3>

<p>当<code>type="file"</code>时,可指定一下属性</p>

<ol>
<li>accept: 指定一个/多个允许的文件上传MIME类型,多个类型用<code>,</code>分割.例如<code>accept="image/*"</code>指定智能上传图片.<a href="http://www.w3school.com.cn/media/media_mimeref.asp">更多格式参考</a></li>
<li>multiple: 允许用户提交多个文件.</li>
</ol>


<p>JS也可以访问上传文件夹的具体属性.</p>

<ol>
<li>name: 返回File对象的文件名.</li>
<li>type: 文本的类型.</li>
<li>size: 文件的大小.</li>
</ol>


<h4>3.2.3.1 新增的FileReader对象读取文件内容</h4>

<p>FileReader对象提供以下方法.</p>

<ol>
<li>readAsText(file,encoding): 以文本格式读取文件.根据ID选择到file,encoding字符编码默认utf-8.</li>
<li>readAsBinaryString(file): 二进制读取文件,通过这种方式可以用Ajax把数据上传到服务器.</li>
<li>readAsDataUrl(file): 以DataURL方式读取文件,这种方式也可以读取二进制,但是这种方式会采用base64方式把文件内容编码成DataURL格式字符串.</li>
<li>abort(): 停止读取.</li>
<li>loaded属性: 当前FileReader已读取文件的大小.</li>
<li>result属性: 当FileReader读取完文件后,result包含读取文件的内容.</li>
</ol>


<p>但read*的所有方法都是异步的,进行时会不断触发函数.</p>

<ol>
<li>onloadstart: FileReader开始读取数据触发.</li>
<li>onprogress: FileReader读取数据时不断触发.</li>
<li>onload: FileReader成功读取后触发.</li>
<li>onloadend: FileReader读取完成触发,无论成功还是失败都会触发.</li>
<li>onerror: FileReader读取失败触发.</li>
</ol>


<p>例子:浏览器读取文件进度条,注意该方法只不过是浏览器读取文件的进度,而不是上传到服务器的进度.</p>

<pre><code>&lt;input id="file_1" type="file" /&gt;
&lt;progress id="pro" value="0"&gt;&lt;/progress&gt;
...
var Read_Binary =function(){
    var reader = new FileReader();
    var pro =document.getLementById("pro");
    pro.max = document.getElementById("file_1").files[0].size;
    reader.onprogress =function (evt){
        pro.value =evt.loaded;
    }
}
</code></pre>

<h3>3.2.4 HTML5 新增客户端校验.</h3>

<p>表单控件可增加以下属性完成校验</p>

<ol>
<li>required: 指定控件必须填写.</li>
<li>pattern: 指定符合正则表达式.</li>
<li>min、max、step: 只对数值类型,日期类型或者<code>&lt;input ../&gt;</code>起作用.,指定数值必须在min~max,并符合step步长.</li>
</ol>


<p>在JS中form对象多了checkValidity()方法,当form表单所有HTML5客户端验证通过返回true.</p>

<p>除此之外,所有表单和表单控件都有validity(ValidityState对象)属性,用于判断表单内所以控件/单个表单验证的情况.返回true/false.</p>

<p>所有表单/表单控件都有setCustomValidity(&ldquo;错误提示&rdquo;)方法,当校验没通过时,自定义的错误提示文字.</p>

<p>关闭表单校验.</p>

<ol>
<li>当form表单属性包含novalidate属性,不进行校验.</li>
<li>当提交按钮设置了 formnovalidate属性,不进行校验.</li>
</ol>


<h1>4 HTML5 绘图支持</h1>

<p><code>&lt;canvas&gt;</code>提供了一个画布.JS进行绘图,绘图步骤</p>

<ol>
<li>获取<code>&lt;canvas&gt;</code>DOM对象.</li>
<li><p>调用Canvas对象的getContext()方法,返回一个CanvasRenderingContext2D对象.</p>

<pre><code> var ctx = Canvas对象.getContext('2d');
</code></pre></li>
<li><p>调用CanvasRenderingContext2D对象的方法进行绘图.</p></li>
</ol>


<p>这部分API非常多,用法这里不主要阐述,后面有时间会单独总结.总的来说,当你的网页功能有绘图的话,这会非常重要.</p>

<p>这里只抛砖引玉一下..会在网页内出现颜色为#f00的长方形.</p>

<pre><code>&lt;canvas id="K" style="width:300px ; height:180px"&gt;

...

var K_Canvas = document.getElementById("K");
var K_CTX = K_Canvas.getContext("2d");
//设置填充颜色
K_CTX.fillStyle= "#f00";
//绘制图形
K_CTX.fillRect(30,40,80,100);
</code></pre>

<h1>5 HTML5 多媒体支持</h1>

<p>简单使用</p>

<pre><code>&lt;!-- 音频 --&gt;
&lt;audio src="demo.ogg" controls&gt;
    你的浏览器不支持audio
&lt;/audio&gt;

&lt;!--视频--&gt;
&lt;video src="movie.webm" controls&gt;
    你的浏览器不支持video元素
&lt;/video&gt;
</code></pre>

<p>audio推荐使用OGG Vovis格式</p>

<p>video推荐使用VP8格式.</p>

<h2>5.1 audio和video支持的属性</h2>

<ol>
<li>src: 地址.</li>
<li>autoplay: 指定了属性装载完成后是否自动播放</li>
<li>controls: 指定了属性就有控制条.</li>
<li>loop: 指定了该属性循环播放.</li>
<li><p>preload 是否预加载,指定了autoplay,此属性无作用.</p>

<p> 5.1 auto: 预加载音频 视频</p>

<p> 5.2 metadata: 只预加载音频 视频元数据.既媒体字节数,第一帧,播放列表,持续时间.</p>

<p> 5.3 none 不预加载.</p></li>
<li><p>poster: 只对video有效,指定一个图片url,开始播放前,显示这张图片.</p></li>
</ol>


<h2>5.2 audio和video可包含标签</h2>

<ol>
<li><p><code>&lt;source ../&gt;</code> 浏览器会根据自己情况选择格式.</p>

<p> 1.1 src: 地址</p>

<p> 1.2 type: 播放格式.</p></li>
</ol>


<h2>5.3 JS控制媒体播放</h2>

<p>DOM获得对象分别是<code>HTMLAudioElement</code>或<code>HTMLVideoElement</code>,支持的方法有.</p>

<ol>
<li>play(): 播放.</li>
<li>pause(): 暂停</li>
<li>load(): 重新装载.</li>
<li><p>canPlayType(type): 判断能否播放type格式的资源,type可指定MIME字符串/codecs属性,多个格式用<code>,</code>分割,返回值有</p>

<p> 4.1 probably: 该浏览器支持type格式.</p>

<p> 4.2 maybe: 可能支持- -..</p>

<p> 4.3 空字符串: 不支持.</p></li>
</ol>


<p>在这里写一个播放多个音乐的JS函数</p>

<pre><code>var musics =[
    "K.ogg",
    "404_K.ogg",
];
var index = 0;
window.onload =function(){
    var player = Audio的DOM对象.
    palyer.src=musics[index];
    //onended在资源播放完后后触发.
    player.onended = function(){
        player.src =musics[++indx % musics.length];
        player.paly();
    }

}       
</code></pre>

<p><code>HTMLAudioElement</code>或<code>HTMLVideoElement</code>包含大量属性和时间监听.这里就不一一列举了.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSS特效方法累积]]></title>
    <link href="http://mzkmzk.github.io/blog/2015/10/23/web_effect/"/>
    <updated>2015-10-23T11:37:40+08:00</updated>
    <id>http://mzkmzk.github.io/blog/2015/10/23/web_effect</id>
    <content type="html"><![CDATA[<!--more-->


<h1>1 鼠标移上去灰色,移走变回原来色彩.</h1>

<pre><code>.product_item {
margin: 40px 0;
-webkit-filter: grayscale(100%);
-moz-filter: grayscale(100%);
-ms-filter: grayscale(100%);
-o-filter: grayscale(100%);

filter: grayscale(100%);

filter: gray;

&amp;:hover {
  -webkit-filter: grayscale(0);
  -moz-filter: grayscale(0);
  -ms-filter: grayscale(0);
  -o-filter: grayscale(0);

  filter: grayscale(0);

  filter: none;
}
}
</code></pre>

<p>应该可以用jquery动画效果实现延迟变化的.</p>

<p>参考链接<a href="http://www.w3cplus.com/css3/ten-effects-with-css3-filter">http://www.w3cplus.com/css3/ten-effects-with-css3-filter</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[修改Bootstrap 记录]]></title>
    <link href="http://mzkmzk.github.io/blog/2015/10/20/bootstrap_update/"/>
    <updated>2015-10-20T11:37:40+08:00</updated>
    <id>http://mzkmzk.github.io/blog/2015/10/20/bootstrap_update</id>
    <content type="html"><![CDATA[<p>本文实在读&lt;&lt;Bootstrap实战>>后写的,里面实践的东西挺多,如果能照着书的代码敲一敲的话.可以满足你基本的布局需求,可是Bootstrap的JS方面提及得不多,需要好好看下源码.</p>

<p>本文会写几个在实际项目中改了的地方.</p>

<h1>0. 前面的工作</h1>

<p>下载Bootstrap的时候不建议下载编译后的代码,下载完整项目源代码,那按模块修改模块,效果棒棒哒.主要用到下面两个工具.</p>

<ol>
<li>sass <a href="http://mzkmzk.github.io/blog/2015/10/16/sass_start/">可以参考</a></li>
<li>grunt <a href="http://mzkmzk.github.io/blog/2015/10/16/grunt_bootstrap/">可以参考</a></li>
</ol>


<h1>1. 设置最大宽度</h1>

<p>因为设计图主题显示区域为967 但是Bootstrap在1200+分辨率下 .container的宽度为1170,所以需要修改_variable.scss</p>

<pre><code>// Large screen / wide desktop
// MaiZhiKun $container-large-desktop:      (1140px + $grid-gutter-width) !default;
$container-large-desktop:      (937px + $grid-gutter-width) !default;
</code></pre>

<h1>2. 修改导航条</h1>

<p>导航栏相关样式<code>_navbar.sass</code>,相关变量<code>_variables.scss</code></p>

<ol>
<li><p>默认灰改成透明</p>

<pre><code> !-- _variables.scss --&gt;
 $navbar-default-bg:                transparent;
</code></pre></li>
<li><p>消除导航栏圆角</p>

<pre><code> &lt;!-- _variables.scss --&gt;
 $border-radius-base:        0 ;
 $border-radius-large:       0 ;
 $border-radius-small:       0 ;
</code></pre></li>
<li><p>改变导航栏中 居中和悬浮的效果</p>

<pre><code> position: absolute !important;
 top: 0; left: 0; bottom: 0; right: 0;
</code></pre>

<p> 参考链接:<a href="http://blog.csdn.net/freshlover/article/details/11579669">http://blog.csdn.net/freshlover/article/details/11579669</a>
 <a href="http://www.smashingmagazine.com/2013/08/absolute-horizontal-vertical-centering-css/">http://www.smashingmagazine.com/2013/08/absolute-horizontal-vertical-centering-css/</a></p></li>
<li><p>导航栏增加上下间距</p>

<pre><code> &lt;!-- _variables --&gt;
 $navbar-height:                    50px !default;   
</code></pre></li>
</ol>


<h1>3修改轮播图</h1>

<p>要做的事情</p>

<ol>
<li><p>将轮播变成三块显示,而非隐藏</p>

<p> 调试过程中,最好将轮播效果取消掉.这里偷懒下,把轮播时间间隔改得大点.修改<code>carousel.js</code></p>

<pre><code>   Carousel.DEFAULTS = {
     interval: 50000000000000000000,
     pause: 'hover',
     wrap: true,
     keyboard: true
   }
</code></pre></li>
</ol>


<h3>记录一些坑点</h3>

<ol>
<li><p>JS混乱</p>

<p> 我导入了bootstrap.js,然后我又压缩了其代码.</p>

<p> 我用的是grunt然后<code>Gruntfile.js</code>写的是<code>*.js</code>导致JS按文件名字顺序压缩,导致JS报错.</p>

<p> 应该按Bootstrap官方源代码的Gruntfile.js顺序.</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[疯狂Html+CSS+JS 中CSS总结]]></title>
    <link href="http://mzkmzk.github.io/blog/2015/10/18/amazeing-css.markdwon/"/>
    <updated>2015-10-18T11:37:40+08:00</updated>
    <id>http://mzkmzk.github.io/blog/2015/10/18/amazeing-css.markdwon</id>
    <content type="html"><![CDATA[<!--more-->


<h1>0总结</h1>

<ol>
<li>第一章详细讲了各种选择器.</li>
<li>第二章讲述了字体和文本的相关属性.</li>
<li>第三章降序了背景边框的属性.</li>
<li>第四章简单讲述了大小、定位等属性.</li>
<li>第五章盒模型,重要的模型讲述得还可以.</li>
<li>第六章表格和列表还有几本的响应式属性.</li>
<li>第七章为变形和动画,通俗易懂的列举了属性</li>
<li>总体来说,这个CSS部分较为枯燥,很多属性需要知道和了解,特别是动画和变形,别太依赖JS.CSS部分具备了入门到初级前端应该知道的知识.</li>
</ol>


<hr />

<h1>1 级联样式与CSS选择器</h1>

<h1>1.1 CSS基本使用</h1>

<h3>1.1.1 引入CSS</h3>

<pre><code>/* 不建议@import 性能问题 */
&lt;link href="CSS文件路径" type="text/css" rel="stylesheet"&gt;
</code></pre>

<h2>1.2 选择器</h2>

<h3>1.2.1 元素选择器</h3>

<pre><code>/* 仅对P标签有作用 */
p{...}
</code></pre>

<h3>1.2.2 属性选择器</h3>

<pre><code>/* 仅对具有attr属性的E元素起作用 */
E[attr]{...}

/* 仅对attr=value的E元素起作用 */
E[attr=value]{...}

/* attr的值以空格为分隔符分开,其中一个值等于value即可的E元素 */
E[attr~=value]{...}

/* attr的值以连字符'_'为分隔符分开,其中一个值等于value即可的E元素 */
E[attr |=value]{...}

/* attr属性包含value值的E元素 */
E[attr*="value"]{...}

/* attr属性以value为开头的E元素 */
E[attr^="value"]{...}

/* attr属性以value为结尾的E元素 */
E[attr$="value"]{...}
</code></pre>

<h3>1.2.3 ID选择器</h3>

<pre><code>/* id为xx的元素起作用 */
#xx{...}

/* id为xx的E元素起作用 */
E#xx{...}
</code></pre>

<h3>1.2.4 class选择器</h3>

<pre><code>/* E为可选是否填写指定元素,my_class为指定lcass */
[E].my_class{...}       

/* class同时包含class1.class2 */
.class1.class2{...}
</code></pre>

<h3>1.2.5 包含选择器</h3>

<pre><code>/* div内所有class为a的元素起作用,无论元素是否为子元素 */
div .a{...} 

/*注意 包含关系有空格,同时满足关系无空格 */
.class1 .class2
</code></pre>

<h3>1.2.6 子选择器</h3>

<pre><code>/* 仅对div的子元素且class为a的元素起作用 */
div&gt;.a{...} 
</code></pre>

<h3>1.2.7 兄弟选择器</h3>

<pre><code>/* id为android的标签 之后出现的且class为long的同级元素 */
#android ~ .long{...}   
</code></pre>

<h3>1.2.8 选择器组合</h3>

<pre><code>/*逗号分隔或关系,仅符合一种选择器即起作用 */
#a,.b,div&gt;.a{...}   
</code></pre>

<h3>1.2.9 伪元素选择器</h3>

<ol>
<li>:first-letter</li>
<li>:first-line</li>
<li>:before</li>
<li>:after</li>
</ol>


<p><code>:first-letter</code>和<code>:first-line</code>可实现首字大写与首行大写之类的问题</p>

<p>注意,这两个伪属性只对块元素<code>div,p,section</code>等元素起作用,对内嵌<code>span</code>等必须设定height与width、或postition:absolute、或display:block.</p>

<pre><code>span{
    disply:block;
}

//首字变蓝
.span:first-letter{
    color:#00f;
}
</code></pre>

<p><code>:before</code>与<code>:after</code>用于在指定元素前/后插入内容,参考下面的内容相关属性.</p>

<h3>1.2.10 内容相关属性</h3>

<ol>
<li>include-source: 属性值为url(url)</li>
<li>content: 作用向指定元素之前或元素之后插入指定内容,该属性的值可以是字符串、url(url)、attr(alt)、counter(name)、counter(name,list-style-type)、open-quote和close-quote等格式.</li>
<li>quotes: 该属性的值可以是两个以空格分隔的字符串,前面代表open-quotes,后面带便quote.</li>
<li>counter-increment:该属性用于定义一个计数器,值为该计数器的名称.</li>
<li><p>counter-rest: 重置计数器.</p>

<pre><code> eg:
 &lt;!-- 子div前添加文字和设置样式 --&gt;
 div&gt;div:before{
     content: '文字';
     colol: blue;
 }

 &lt;!-- 含有class为on的子div之后的添加图片 --&gt;
 div&gt;div.no:after{
     content:url("K.gif");
 }

 &lt;!-- 配合quetos 对的...其实这属性貌似并没神马卵用.. --&gt;
 &lt;!-- 是的,你没猜错..其实close-quote写在before里也是可以的.. --&gt;
 div&gt;div{
     quotes: "&lt;&lt;" "&gt;&gt;";
 }

 div&gt;div:before{
     content: open-quote;
 }

 div&gt;divafter{
     content:close-quote;
 }

 &lt;!-- counter-increment添加编号1. 2. 3. --&gt;
 div&gt;div{
     counter-increment: fucking_K;
 }

 div&gt;div:before{
     content: counter{fucking_K} '.';
     font-size: 20pt;
 }

 &lt;!-- 拓展样式 更多参数&lt;https://developer.mozilla.org/zh-CN/docs/Web/CSS/list-style-type&gt; --&gt;
 div&gt;after{
     content: counter{fucking_K,lower-roman} '.';
     font-size: 20pt;
 }

 &lt;!-- 多级编号 --&gt;
 div&gt;h2{
     counter-increment: fucking_K;
 }

 div&gt;div{
     counter-increment: funcking_K2;
 }

 div&gt;h2:before{
     counter-increment: funcking_K;
     counter-reset: fucking_K2;
 }

 div&gt;div:before{
     content: counter: funcking_K2;
 }
</code></pre></li>
</ol>


<h3>1.2.11 伪类选择器</h3>

<p>Selecttor可省略.不作为匹配条件</p>

<ol>
<li><p>结构性伪类选择器</p>

<p> 1.1 Selector:root: HTML元素中,永远指向<code>&lt;html.../&gt;</code>元素.</p>

<p> 1.2 Selector:first-child: 匹配其父元素的第一个节点.</p>

<p> 1.3 Selector:last-child: 匹配选择器,而且是其父元素的最后一个节点.</p>

<p> 1.4 Selector:nth-child(n): 匹配选择器,而且是其父元素的第n个节点.</p>

<p> 1.5 Selector:nth-last-child(n): 匹配选择器,而且是其父元素倒数第n个节点.</p>

<p> 1.6 Selector:only-child: 匹配选择器,而且是其父元素唯一的节点.</p>

<p> 1.7 Selector:first-of-type: 匹配选择器,而且是其同类型的兄弟元素中的第一个元素.</p>

<p> 1.8 Selector:last-of-type: 匹配选择器,而且是其同类型的兄弟元素中的最后一个元素.</p>

<p> 1.9 Selecttor:nth-of-type(n): 匹配选择器,而且是其同类型的兄弟元素中的第n个元素.</p>

<p> 1.10 Selector:nth-last-of-type(n): 匹配选择器,而且是其同类型的兄弟元素中的倒数第n个元素.</p>

<p> 1.11 Selector:only-of-type: 匹配选择器,而且是其同类型的兄弟元素的唯一一个元素.</p>

<p> 1.12 Selector:only:empty: 匹配选择器,而且其内部没有任何子元素(包括文本)的元素.</p>

<p> 拿first-child和first-of-type举例</p>

<pre><code> &lt;ul&gt;
 &lt;img .../&gt;
     &lt;li&gt;...&lt;/li&gt;
 &lt;/ul&gt;

 //匹配不到任何元素,li必须是父元素的第一个元素.
 li:first-child{...}

 //匹配到li,是在父元素中匹配到的类型中的第一个即可.
 li:first-of-type{...}   
</code></pre>

<p> <code>-child匹配是会把其他不同类型的兄弟节点算进去,而-of-type只计算同类型的兄弟元素</code></p>

<p> 其中nth-child(n)、nth-last-child(n)、nth-of-type(n)、nth-last-of-type(n)支持参数</p>

<ol>
<li>odd:匹配奇数的元素</li>
<li>even:匹配偶数的元素</li>
<li>xn+y: 匹配第(x乘以n)加y的元素</li>
</ol>
</li>
<li><p>UI元素状态伪类选择器</p>

<p> 2.1 Selector:link: 匹配未访问的元素</p>

<p> 2.2 Selector:visited: 匹配访问过的元素</p>

<p> 2.3 Selector:active: 匹配处于用户被激活(鼠标点击与释放的过程中)的元素</p>

<p> 2.4 Selector:hover: 匹配鼠标悬停状态的元素</p>

<p> 2.5 Selector:focus: 匹配已得到焦点的元素</p>

<p> 2.6 Selector:enabled: 匹配当前处于可用状态的元素</p>

<p> 2.7 Selector:disabled: 匹配当前不可用状态的元素</p>

<p> 2.8 Selector:checked: 匹配当前选中状态的元素</p>

<p> 2.9 Selector:ready-only: 匹配当前只读状态的元素</p>

<p> 2.10 Selector:read-write: 匹配当前处于读写状态的元素</p>

<p> 2.11 Selector::selection: 匹配当前被选中的内容.</p></li>
<li><p>特殊的伪类选择</p>

<p> 3.1 Selector1:not(Selector2): 匹配符合Selector1选择器,但不符合Selector2选择器的元素</p>

<pre><code> //尝试了Selector2 写了两个条件,无法筛选.然后这样就可以- -.
 :not(.container):not(.row):not(h3) {...}
</code></pre>

<p> 3.2 Selector:target: 匹配符合Selector选择器且必须是命名描点的且正在被访问的目标选择器.</p>

<pre><code> :target{
     background-color: #fff;
 }

 &lt;a href="#K" /&gt;

 //当正在浏览此div,:target生效
 &lt;div id="K"&gt;
     ...
 &lt;/div&gt;
</code></pre></li>
</ol>


<h3>1.3 浏览器专属属性</h3>

<ol>
<li>-ms- IE内核</li>
<li>-moz- Gecko内核(Firefox)</li>
<li>-o- Opera浏览器</li>
<li>-webkit- Webkit内核(Chrome、Safari)</li>
</ol>


<h3>1.4 JS修改CSS</h3>

<pre><code>//修改属性
//注意属性名中采用驼峰命名,例如改变background-color,属性名要写backgroundColor
document.getElementById("id").style.属性名=属性值;

//修改class
document.getElementById("id").className=class名称;
</code></pre>

<hr />

<h1>2 字体与文本相关属性</h1>

<h2>2.1 字体相关属性</h2>

<ol>
<li>font: 可添加font-style,font-variant,font-weight,font-size,line-height,font-family等属性.</li>
<li>color: 字体颜色,可颜色名,十六进制颜色值,RGB,HSL</li>
<li>font-family: 设置字体,可用<code>,</code>分割按顺序使用字体</li>
<li>font-size: 字体大小</li>
<li>font-size-adjust: 对字体进行微调.</li>
<li>font-streth: 改变字体横向拉伸,narrower既横向压缩,wider横向拉伸.</li>
<li>font-style: 文字风格,常用属性有italic斜体,oblique倾斜体.</li>
<li>font-weight: 是否加粗,属性可数值,也可lighter、normal、bold、bolder,越来越粗.</li>
<li>text-decoration: 文字修饰线,常用属性有:none、blink闪烁、underline、line-through中划线、overline上划线.</li>
<li>font-variant: 设置文字大写字母格式,属性有normal、small-caps(小型大写字母).</li>
<li>text-shadow: 文字阴影效果,后面会详细提.</li>
<li>text-transform: 字母大小写none,capitalize首字母大写、unpercase全部大写、lowercase全部小写;.</li>
<li>line-height: 行高,负值时候可用来实现阴影效果.</li>
<li>letter-spacing: 字符之后的间隔.最后一个字不受影响</li>
<li>word-soacing: 单词之间的间隔.</li>
</ol>


<h3>2.1.1 字体添加阴影</h3>

<p>text-shadow,多组阴影用,分割</p>

<ol>
<li>color: 指定阴影颜色.</li>
<li>xoffset: 指定阴影在横向上的偏移量.(可负值)</li>
<li>yoffset: 指定阴影在纵向上的偏移量.(可负值)</li>
<li><p>redius: 指定阴影的模糊半径,半径越大越模糊    .</p>

<pre><code> &lt;!-- 向右下角和左上角加阴影加阴影--&gt;
 &lt;span style="text-shadow:5px 5px 2px gray,-5px 5px 2px gray"&gt;帅哥麦&lt;/span&gt;
</code></pre></li>
</ol>


<h3>2.1.2 微调字体大小</h3>

<p>font-size-adjust用调节同样字号不同字体的效果.</p>

<p>font-size-adjust通过设定aspect值从而控制不同字体的大小.</p>

<p>aspect等于字体小写x的高度除以该字体的大小.</p>

<pre><code>    #div {
        font-size: 16pt;
        font-family: "狂草";
        font-size-adjust:0.52;
    }   

    #div2 {
        font-size: 16pt;
        font-family: "楷书";
        font-size-adjust: 1.22;
    }
</code></pre>

<h2>2.2 CSS3支持的颜色表示方法</h2>

<ol>
<li>颜色名:white,red,greenyellow</li>
<li>十六进制</li>
<li>rgb(r,g,b)</li>
<li>rgba(r,g,b,a): a在0~1之间,0表示完全透明</li>
<li>hsl(hue,saturation,lightness):色调,饱和度,亮度控制.</li>
<li>hsla(h,s,l,a).</li>
</ol>


<h2>2.3 文本相关属性</h2>

<p>此类属性用于控制整段或整个div的</p>

<ol>
<li>text-indent: 文本的缩进</li>
<li><p>text-overflow:</p>

<p> 2.1 clip: 要指定overflow:hidden,隐藏溢出的文字</p>

<p> 2.2 ellipsi: 要指定了overflow:hidden,溢出时候用&hellip;标记</p></li>
<li><p>vertical-align:指定内容垂直方式</p>

<p> 3.1 auto: 自动对齐</p>

<p> 3.2 baseline: 默认值,将支持valign属性的元素的文本内容与基线对齐</p>

<p> 3.3 sub: 文本下标对齐</p>

<p> 3.4 super: 文本上标对齐</p>

<p> 3.5 top: 默认值,将支持valign属性的元素的文本内容与元素的顶端对齐</p>

<p> 3.6 middle: 默认值,将支持valign属性的元素的文本内容对齐到元素的中间.</p>

<p> 3.7 bottom: 默认值,将支持valign属性的元素的文本内容与元素的底端对齐.</p></li>
<li><p>text-align: left,right,center,justify(两端对齐)</p></li>
<li><p>direction: 用于设置文本流入的方式,ltr(左到右),rtl(右到左),不会影响数字和拉丁文字母(除拉丁文标点符号).</p></li>
<li><p>word-break: 用于设置目标组件中文本的换行方式</p>

<p> 6.1 normal: 按浏览器默认,西方文字:只会在半角空格、连字符地方换行.中文,任意文字后换行.</p>

<p> 6.2 keep-all: 只能在半角空格或连字符换行</p>

<p> 6.3 break-all: 允许在连续单词中间换行</p></li>
<li><p>white-space:处理目标组件中文本对空格的处理</p>

<p> 7.1 normal: 自动换行</p>

<p> 7.2 nowrap: 强制文本一行显示,除非遇到<code>&lt;br /&gt;</code></p></li>
<li><p>word-wrap: 用于设定目标组中文本内容的换行方式</p>

<p> 8.2 normal: 浏览器默认</p>

<p> 8.3 break-word: 允许单词中间换行.</p></li>
</ol>


<p>word-break兼容性不好,单词中换行最好使用<code>word-wrap:breakword;</code></p>

<p>word-break和word-wrap区别:</p>

<ol>
<li><p>word-break: break-all:会让每一行文本最后一个单词换行.(不浪费一点空间)</p></li>
<li><p>word-wrap: break-word:会让太长单词之前自动换行.</p></li>
<li><p>情况很多,不好理解.具体参考<a href="http://www.cnblogs.com/2050/archive/2012/08/10/2632256.html">http://www.cnblogs.com/2050/archive/2012/08/10/2632256.html</a></p></li>
</ol>


<h2>2.4 服务器字体</h2>

<ol>
<li>下载.ttf/.otf字体</li>
<li><p>定义服务器字体</p>

<pre><code> &lt;!-- src ...;后可跟字体样式属性 --&gt;
 @font-face {
     font-family: 404_K;
     src: url(url) format("字体格式");
     font-weight: blod;
 }
</code></pre></li>
</ol>


<h3>2.4.1 优先使用客户端字体</h3>

<pre><code>    @font-face {
        font-family: 404_K;
        src: location("微软雅黑"),url(url) format("字体格式");
        font-weight: blod;
    }
</code></pre>

<hr />

<h1>3 背景、边框和补丁相关属性</h1>

<h2>3.1 背景相关属性</h2>

<ol>
<li>background: 可控制背景颜色、背景图片、背景重复方式.</li>
<li><p>background-attachment: 背景图片是否随对象内容滚动还是固定.</p>

<p> 2.1: scorll:背景随内容滚动</p>

<p> 2.2 fixed:背景图片固定.</p></li>
<li><p>background-color: 背景色</p></li>
<li>background-image: 背景图片,背景图片会覆盖背景色(假如同时设置了).</li>
<li>background-position: 可百分百可数值,只设横百分比,纵百分比为50%.</li>
<li><p>background-repeat:是否平铺</p>

<p> 6.1 repeat:平铺</p>

<p> 6.2 repeat-x:横向平铺</p>

<p> 6.3 repeat-y:纵向平铺</p>

<p> 6.4 no-repeat:不平铺</p></li>
</ol>


<hr />

<p>以下为CSS3新增</p>

<ol>
<li><p>background-clip: 指定背景覆盖范围.</p>

<p> 7.1 border-box: border-box(覆盖border,padding,content)</p>

<p> 7.2 padding-box: 覆盖padding,content(默认)</p>

<p> 7.2 content-box,只覆盖content.</p></li>
<li><p>background-origin: 设置背景覆盖的起点,有点和background-position类似.或指定从哪个区域的开始放置背景图片(content,padding,border).Chrome和Safari使用要开-webkit开头.</p></li>
<li><p>background-size: 设置图片大小.</p>

<p> 9.1 数值: 12px,13px 占宽12px,高13px;</p>

<p> 9.2 百分比: eg 80% 10%,宽占百分之80,高占百分之10%</p>

<p> 9.3 auto:只有一个值能为auto,根据另外一个值自动缩放(这个对响应式非常有用,保证图片不走形 100% auto,完全显示图片).</p></li>
</ol>


<p>CSS3提供了多背景控制,属性还是上面的,多个背景属性用,隔开.</p>

<h2>3.2 边框相关属性</h2>

<ol>
<li>border: 设置边框样式,粗细,线型,颜色.</li>
<li>border-color: 边框颜色..任何颜色值</li>
<li><p>border-style: 边框样式</p>

<p> 3.1 none:无边框</p>

<p> 3.2 hidden: 隐藏边框,于none类似,当在表中可解决边框冲突</p>

<p> 3.3 dotted: 电线边框</p>

<p> 3.4 dashed: 虚线边框</p>

<p> 3.5 solid: 实现边框</p>

<p> 3.6 double: 双线边框</p>

<p> 3.7 grove: 3D凹槽边框</p>

<p> 3.8 ridge: 3D凸槽边框</p>

<p> 3.9 inset: 3D凹入边框</p>

<p> 3.10 outset: 3D凸出边框(个人感觉3.7,3.8和3.9,3.10类似,不过立体感弱一点)</p></li>
<li><p>border-width: 边框线框.任何有效长度值.若只设width,是没法占位置的.</p></li>
</ol>


<hr />

<p>以下top bottom right left皆有.</p>

<ol>
<li>border-top: 设置上线的复合属性,可设置边框样式,粗细,线型,颜色.</li>
<li>border-top-color: 上边框颜色.</li>
<li>border-top-style: 边框样式</li>
<li>border-top-width: 上边线框.</li>
<li>border-top-colors: 渐变属性,CSS3新增,假设border-top-width为Npx,则可以设置N种颜色,从外框往里渐变,若设置的颜色个数小于width,最后一个颜色会作为之后的颜色.</li>
</ol>


<hr />

<p>圆角边框,CSS3新增</p>

<ol>
<li>border-radius: 圆角边框,数值代表圆角半径,半径越大,越圆,</li>
<li>还有border-top-left-radius、border-top-right-radius、border-bottom-left-radius、border-bottom-right-radius属性.</li>
</ol>


<hr />

<p>图片边框</p>

<ol>
<li>border-image: 语法:<code>&lt;border-image-source&gt;  &lt;border-image-slice&gt;[/boder-image-width]?  &lt;border-image-repeat&gt;</code></li>
<li>border-image-source: none/url(&ldquo;图片路径&rdquo;)</li>
<li>border-image-slice: 可输1~4个百分比或数值用于切割图片,按上下左右切割,得出9张小图片,默认情况中间会丢弃.但例如 10 20&amp;&amp;fill中间就会保留放在内容中间.</li>
<li>border-image-width: 为上面切割的图片设置宽度.可设置1~4个长度,百分比,或auto,指定image-slice的宽度.</li>
<li><p>border-iamge-repeat: 指定图片覆盖方式.可设0~2个值,分别代表横竖.</p>

<p> 5.1 stretch: 拉伸覆盖</p>

<p> 5.2 repeat: 平铺覆盖</p>

<p> 5.3 round: 取整平铺,和repeat类似,</p>

<pre><code> 当最后一张图片不能显示超过一半,则不显示最后一张图片,通过拉伸前面的图片实现填充.

 当最后一张图片可以显示超过一半,则显示最后一张图片,压缩前面的图片.
</code></pre></li>
</ol>


<p>border存在则border-image相关属性不起作用.</p>

<h1>3 大小、定位、轮毂相关属性</h1>

<h2>3.1 大小相关属性</h2>

<ol>
<li>height: 设定高度</li>
<li>max-height: 设定最大高度.当此属性小于min-height,则自动转化为min-height,下面属性同理</li>
<li>min-height: 设定最小高度.</li>
<li>width: 设定宽度</li>
<li>max-width: 最大宽度</li>
<li>min-widht: 最小宽度</li>
</ol>


<p>CSS3新增属性</p>

<ol>
<li><p>box-sizing: 用于设定width和height控制content padding border等哪些区域.</p>

<p> 1.1 content-box: 只控制content</p>

<p> 1.2 padding-box: 控制content+padding</p>

<p> 1.3 border-box: 控制contetn+padding+border</p></li>
<li><p>resize: 设置用户能否拖动组件来改变组件的大小</p>

<p> 2.1 none: 不能改变大小</p>

<p> 2.2 both: 能改变大小,但只能按比例缩放</p>

<p> 2.3 horizontal: 不允许改变高度,能改变宽度</p>

<p> 2.4 vertical: 不允许改变宽度,能改变高度</p></li>
</ol>


<h2>3.2 定位相关属性</h2>

<p>定位作用为在于布局,漂浮~.除了position以外的其他属性不对static起作用.</p>

<ol>
<li><p>position 定位方式</p>

<p> 1.1 absolute: 组件会漂浮在页面上,不考虑周围内容</p>

<p> 1.2 relative: 参考前一个组件的位置来定位</p>

<p> 1.3 static: 默认值,没有定位,元素出现在正常的页面流中.</p>

<p> 1.4 fixed: 绝对定位,以浏览器为定位参考</p></li>
<li><p>z-index: 数值觉得漂浮重叠优先级.数值越高优先级越高.</p></li>
<li>top: 设定最近一个具有定位设置的父元素向顶部偏移.</li>
<li>right: 设定最近一个具有定位设置的父元素向右侧偏移.</li>
<li>bottom: 设定最近一个具有定位设置的父元素向底部偏移.</li>
<li>left: 设定最近一个具有定位设置的父元素向顶部偏移.</li>
</ol>


<p>漂浮居中定位设置很常用的一招.</p>

<pre><code>margin: auto;  
position: absolute;  
top: 0; left: 0; bottom: 0; right: 0; 
</code></pre>

<p>原理及其它居中方式<a href="http://blog.csdn.net/freshlover/article/details/11579669">http://blog.csdn.net/freshlover/article/details/11579669</a>.</p>

<h3>3.3 轮廓相关属性</h3>

<p>轮廓不占页面实际物理布局面积,可实现&#8221;光晕效果&#8221;.</p>

<ol>
<li>outline: 可设置轮廓颜色 线宽 线型.</li>
<li>outline-color: 轮廓颜色.</li>
<li>outline-style: 和之前的border-style一致.</li>
<li>outline-width: 轮廓宽度.</li>
<li>outline-offset: 设置轮廓和边框的距离</li>
</ol>


<h1>4 盒模型与布局相关属性</h1>

<h2>4.1 布局相关属性</h2>

<ol>
<li>float: 可left/right.当设置了该属性强制display为block,它会紧靠组件的左/右,直到遇到边框/padding/margin或另外一块组件(display为block)为止.)</li>
<li><p>clear: 设置该组件能否出现浮动组件.</p>

<p> 2.1 none: 默认,你随便飘~</p>

<p> 2.2 left: 不允许出现左飘~</p>

<p> 2.3 right: 不允许出现右飘~</p>

<p> 2.4 both: 你丫的别给我飘~.</p></li>
<li><p>clip: 对组件裁剪设置,(只有在position为absolute且overflow:hidden,效果才会较好.)</p>

<p> 3.1 rect(Num_A,Num_B,Num_C,Num_D),定义一个矩形,只有在矩形内才显示出来.这4个数有点奇葩,和别的不一样,定义的矩形为,横向显示(Num_D~Num_B)的内容,纵向显示(Num_A~Num_C)的内容.  当Num为auto,表示该边不做裁剪.</p></li>
<li><p>overflow: 设置等组件不能容纳内容显示时,采取的措施</p>

<p> 4.1 visble: 默认,不剪切也不加滚动条.</p>

<p> 4.2 auto: 添加滚动条显示全部内容.</p>

<p> 4.3 hidden: 裁剪不能显示的部分.</p>

<p> 4.4 scroll: 不够内容有没有超,总显示滚动条.</p></li>
<li><p>overflow-x: 仅对横向方向起作用,属性同overflow.</p></li>
<li>overflow-y: 仅对纵向起作用.属性同overflow.</li>
<li>visibility: visibl/hidden.隐藏时仍占据网页空间</li>
<li><p>display: 设置盒模型.</p>

<p> 8.1 block类型: 默认占据一行,可CSS设置宽高度,默认此属性的元素有<code>&lt;div&gt;、&lt;p&gt;、&lt;h1&gt;...&lt;h6&gt;、&lt;ol&gt;、&lt;ul&gt;、&lt;dl&gt;、&lt;table&gt;、&lt;address&gt;、&lt;blockquote&gt; 、&lt;form&gt;</code>等.</p>

<p> 8.2 inline类型: 默认允许一行放多个组件,CSS设置宽高度无作用.默认此属性的元素有<code>&lt;a&gt;、&lt;span&gt;、&lt;br&gt;、&lt;i&gt;、&lt;em&gt;、&lt;strong&gt;、&lt;label&gt;、&lt;q&gt;、&lt;var&gt;、&lt;cite&gt;、&lt;code&gt;</code>等.当两个block中间有inline他们是不可以在同一行的,</p>

<p> 8.3 none: 隐藏组件,不占网页空间.</p>

<p> 8.4 inline-block盒模型: 不占据一行,但可以设置宽高度.这个也可以实现多栏布局.默认情况下,多个inline-block盒模型会对齐底部.改变对齐顶部使用<code>vertical-align:top</code>,默认此属性的元素有<code>&lt;img&gt;、&lt;input&gt;</code>等.当两个block中间有inline-block他们是可以在同一行的,</p>

<p> 8.5 inline-table盒模型: 与inline-block类似,分别在表格设置inline-table或inline-block,但是inline-table设置width会拉伸单元格,inline-block会把内容多余的空间在右边留白,而不是给单元格.</p>

<pre><code> //关于表格的盒模型,其实作用不大,作用大概就是可以把div当做表格来显示.
 1. table: 将组件变为表格.
 2. table-caption: 将组件变为表格标题.
 3. table-cell: 将组件变为单元格.
 4. table-column: 将组件变为表格列.
 5. table-column-group: 将组件变为表格列组.
 6. table-row: 将组件变为表格行.
 7. table-row-group: 将组件变为表格列组.
 8. table-header-group: 将组件变为表格头部分.
 9. table-footer-group: 将组件变为表格尾部分.
</code></pre>

<p> 8.6 list-item盒模型: 可以将组件转为ul等列表元素.</p>

<p> 8.7 run-in盒模型: 和inline类似,但假如后面紧跟block,那么run-in会包含在后面的block中.</p>

<p> 8.8 box模型: CSS3新增.当display为box时,组件可以使用以下的属性控制box</p>

<pre><code> 1. box-orient:horizontal/vertical. 

     1.1 当属性为horizontal时候,没有为子元素定义高度,则高度等于父元素的高度.

     1.2 当属性为vertical时候,没有为子元素定义宽度,则高度等于父元素的宽度.

 2. box-oridinal-group: 设置box盒模型中子元素的显示顺序.

 3. box-flex: 设置模型自动适应宽度比例,

     3.1 例如box盒模型多余150px,第一个元素的box-flue为1,第二个元素的box-flue为2,则把多余的宽度分50px给第一个元素,分100px给第二个元素.  
</code></pre></li>
</ol>


<h2>4.2 给盒子加阴影</h2>

<p>CSS3新增的,主要使用box-shadow属性.是一个复合属性,包括以下5个属性.</p>

<ol>
<li>hOffset: 控制阴影在水平方向的偏移.</li>
<li>vOffset: 控制阴影在纵向的偏移.</li>
<li>blurLength: 控制阴影的模糊程度.</li>
<li>scaleLength: 控制阴影的缩放程度.</li>
<li>color: 控制阴影颜色</li>
</ol>


<p>eg:</p>

<pre><code>&lt;!-- 右下阴影,模糊程度10px,缩小阴影区域-10px --&gt;
&lt;div style="box-shadow: 10px 8px 10px -10px red"&gt;..&lt;/div&gt;
</code></pre>

<h2>4.3 column-count分栏</h2>

<p>column-count分栏为CSS3新增,属性主要有:</p>

<ol>
<li>columns: 复合属性,可指定栏目宽度,栏目数.但内容大于容器时,Firefox和Chrome会增加每栏的宽度,Opera会保持栏目宽度,但增加栏目数.</li>
<li>column-width: 指定每个栏目的宽度.</li>
<li>column-count: 指定栏目个数.</li>
<li>column-rule: 符合属性,指定栏目之间分隔条的宽度 样式 颜色.</li>
<li>column-rule-width: 指定分隔条的宽度.</li>
<li>column-rule-style: 指定分隔条的样式,属性和border-style的样式一样.</li>
<li>column-rule-color: 指定分隔条的颜色.</li>
<li>column-gap: 设定栏目的间距.</li>
<li><p>column-fill: 设定栏目的高度</p>

<p> 9.1 auto: 根据内容多少变化高度.</p>

<p> 9.2 balance: 高度统一为最长的那栏的高度.</p></li>
</ol>


<h1>5 表格、列表及media query</h1>

<h2>5.1 表格相关属性</h2>

<ol>
<li><p>border-collapse: 控制两个单元格的边框分开还是合并.</p>

<p> 1.1 seperate: 边框分开.(双线)</p>

<p> 1.2 collapse: 边框合并.(单线)</p></li>
<li><p>border-spacing: 前提为border-collapse为seperate时,设置分割间距.</p></li>
<li>caption-side: 设置表格标题在表格的哪边,必须与<code>&lt;caption.../&gt;</code>一块使用,属性有top bottom/left/right.</li>
<li>empty-cells: 前提为border-collapse为seperate,设置单元格为空时,是否显示单元格边框,属性有show/hide.</li>
<li><p>table-layout: 设置表格宽度布局方法.</p>

<p> 5.1 auto: 默认值.</p>

<p> 5.2 fixed 固定布局.</p>

<pre><code> //fixed表格宽度计算方式.
 1. 如果设置了&lt;col../&gt;或&lt;colgroup../&gt;每列的宽度,则表格宽度等于所有列宽的总和.
 2. 如果表格内第一个单元格设置了宽度,则表格宽度所有所以列宽的总和.
 3. 直接平均分配每列的宽度,忽略单元内容的实际宽度.
</code></pre></li>
</ol>


<h2>5.2 列表相关属性</h2>

<ol>
<li>list-style: 复合属性,可以指定list-style-image list-style-position list-style-type.</li>
<li>list-style-image: 指定列表标记的图片.</li>
<li><p>list-style-position: 设定列表标记出现的位置</p>

<p> 3.1 outside: 列表项标记防盗列表元素之外.</p>

<p> 3.2 inside: 列表想标记放在列表元素之内.</p></li>
<li><p>list-style-type : 设置项标记符号,list-style-image会覆盖list-style-type属性,全部属性<a href="http://www.w3school.com.cn/cssref/pr_list-style-type.asp">参考</a>.常用的有</p>

<p> 4.1 decimal: 默认,阿拉伯数字.</p>

<p> 4.2 disc: 实心圆</p>

<p> 4.3 upper-roman: 大写罗马数字.</p>

<p> 4.4 none: 不使用符号.</p>

<p> 4.5 lower-alpha: 小写英文字母</p>

<p> 4.6 upper-alpha: 大写英文字母</p></li>
</ol>


<h2>5.3 控制光标的属性</h2>

<p>cursor属性控制光标属性</p>

<ol>
<li>auto: 默认</li>
<li>default: 默认光标(一般是箭头).</li>
<li>all-scroll: 代表十字箭头光标.</li>
<li>col-resize: 代表水平拖动线光标.</li>
<li>crosshair: 代表十字线光标.</li>
<li>more: 移动十字箭头光标.</li>
<li>help: 带问号光标.</li>
<li>no-drop: 禁止光标.</li>
<li>not-allowed: 和no-drop一样.</li>
<li>pointer: 代表手型光标.</li>
<li>progress: 代表漏沙光标.</li>
<li>wait: 和progress一样.</li>
<li>row-resize: 代表垂直拖动光标.</li>
<li>text: 文本编辑光标.</li>
<li>vertical-text: 代表垂直文本编辑光标.</li>
<li>*-resize: 该属性*可为n(上) s(下) e(右) w(左) 方向的光标.*可为1位或2位,例如nw-resize代表指向上右的光标.</li>
</ol>


<h2>5.4 media query功能</h2>

<p>语法</p>

<pre><code>@media [not|only] 设备类型 [and 设备特性]*
</code></pre>

<ol>
<li>all: 所有设备.</li>
<li>aural: 适用于语音和音频合成器.</li>
<li>braille: 适用于触觉反馈设备.</li>
<li>embossed: 使用凸点字符(盲文)印刷设备.</li>
<li>handheld: 适用于小型或手提设备.</li>
<li>print: 适用于打印机.</li>
<li>projection: 适用于投影图像,如幻灯片.</li>
<li>screen: 适用于计算机显示器.</li>
<li>tty: 适用于固定间距字符格的设备,如电传打字机和终端.</li>
<li>tv: 适用于电视类设备.</li>
</ol>


<p>设备特性中的值<a href="http://blog.csdn.net/lee_magnum/article/details/12144187">参考</a></p>

<p>最常用的设备特新为 min-width和max-width.</p>

<p>一般使用的代码</p>

<pre><code>@media screen and (min-width: ***px){...}
</code></pre>

<h1>6 变形与动画相关属性.</h1>

<h2>6.1 CSS3提供的变形支持</h2>

<ol>
<li><p>transform: 设置1个或多个变形函数,设置变形函数顺序和重要,按顺序变形,变形函数有</p>

<p> 1.1 translate[tx[,ty]]: 横向移动tx,纵向移动ty.,ty不写则不移动.</p>

<p> 1.2 translateX(tx): 横向移动tx.</p>

<p> 1.3 translateY(ty): 纵向移动ty.</p>

<p> 1.4 scanle(sx[,sy]): 横向缩放比为sx,纵向缩放比为sy,但sy不填,则缩放比为sx.</p>

<p> 1.5 scanleX(sx): scanle(sx,1).</p>

<p> 1.6 scanleY(sy): scanle(1,sy).</p>

<p> 1.7 rotate(angle): 顺时针转angle角度.</p>

<p> 1.8 skew(sx [,sy]): 沿X轴倾斜sx角度,沿Y轴倾斜sy角度.省略sy,sy为0.</p>

<p> 1.9 skewX(sx): skew(sx);</p>

<p> 1.10 skewY(sy): skew(0,sy);</p>

<p> 1.11 matrix(m11,m12,m21,m22,dx,dy): 基于矩阵变换,前4个参数组成变形矩形,dx、表示对坐标系统进行平移.</p>

<pre><code> //按照矩形变换公司最后变形坐标计算公式,其实变形函数都是通过这个函数实现的.
 (x*m11+y*m21+dx,x*m12+y*m22+dy);
</code></pre></li>
<li><p>transform-origin: xCenter yCenter ,设置变形中心点,可选值有左上角 左下角 右下角 右上角</p>

<p> 2.1 xCenter可为left/right</p>

<p> 2.2 yCenter可为top/bottom</p></li>
</ol>


<h2>6.2 CSS3提供的Transition</h2>

<p>transition属性指定下面4部分,可设置多组动画,用<code>,</code>分割.</p>

<ol>
<li>transition-property:指定组件的哪个CSS属性进行平滑渐变,可指定background-color,width,height等标准CSS属性.</li>
<li>transition-duration: 渐变时间.</li>
<li><p>transition-timing-function: 渐变速度</p>

<p> 3.1 ease: 先慢后快再慢.</p>

<p> 3.2 linear: 速度不变.</p>

<p> 3.3 ease-in: 先慢后快</p>

<p> 3.4 ease-out: 先快后慢.</p>

<p> 3.5 ease-in-out: 和ease类似.</p>

<p> 3.6 cubic-bezier(x1,y1,x2,y2): 通过贝济埃曲线控制动画.</p></li>
<li><p>transition-delay: 指定延迟时间.延迟多久后开始渐变</p></li>
</ol>


<p>eg:</p>

<pre><code>div{
    浏览器前缀-transition: background-color 4s linear 4s.
}   
</code></pre>

<h2>6.3 CSS 3提供的Animation动画</h2>

<p>Animation动画提供一下几个属性.</p>

<ol>
<li>animation 复合属性,可同时按顺序设置下面的属性.</li>
<li>animation-name: 动画名称,指向一个已有的关键帧.</li>
<li>animation-duration: 制动动画的持续时间.</li>
<li>animation-timing-function: 指定动画的变化速度.</li>
<li>animation-delay: 延迟多久开始执行动画.</li>
<li>animation-iteration-count: 指定动画循环次数.数值/infinite为无数次,</li>
</ol>


<p>关键帧定义格式:</p>

<pre><code>keyframes 关键帧名称 {
    form | to | 百分比 {
        css属性1 : 属性值1;
        ...
    }
    ...
}
</code></pre>

<p>eg 实现鼠标hover时放大div:</p>

<pre><code>@-webkit-keyframes '404_K' {
    0% {
        -webkit-transform: scale(1);
    }

    50% {
        -webkit-transform: scale(2);
    }

    100% {
        -webkit-transform: scale(1);
    }
}
...
div&gt;a:hover {
    -webkit-animation-name: '404_K' ;
    -webkit-animation-duration: 3s;
    -webkit-animation-iteration-count: infinite;
} 
</code></pre>

<h3>参考资源</h3>

<ol>
<li>特殊字符编码表<a href="http://www.jb51.net/onlineread/htmlchar.htm">http://www.jb51.net/onlineread/htmlchar.htm</a></li>
<li>CSS学习资料网站<a href="http://zh.learnlayout.com/inline-block.html">http://zh.learnlayout.com/inline-block.html</a></li>
</ol>

]]></content>
  </entry>
  
</feed>
