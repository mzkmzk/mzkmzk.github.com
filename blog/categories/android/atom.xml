<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: android | K]]></title>
  <link href="http://mzkmzk.github.io/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://mzkmzk.github.io/"/>
  <updated>2015-10-15T23:17:07+08:00</updated>
  <id>http://mzkmzk.github.io/</id>
  <author>
    <name><![CDATA[K]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android开发总结]]></title>
    <link href="http://mzkmzk.github.io/blog/2015/09/10/android_summarization/"/>
    <updated>2015-09-10T11:37:40+08:00</updated>
    <id>http://mzkmzk.github.io/blog/2015/09/10/android_summarization</id>
    <content type="html"><![CDATA[<ol>
<li>命名规范时,要保增加/删除其他功能时命名不用改变</li>
<li>模块化,一般大量调用后就不要轻易改变.作为一个基础.不然其他调用此模块的代码都需要改变</li>
<li>不错的参考模块<a href="http://www.codeceo.com/article/android-code-style-guide.html">http://www.codeceo.com/article/android-code-style-guide.html</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android adb]]></title>
    <link href="http://mzkmzk.github.io/blog/2015/09/10/android_adb_order/"/>
    <updated>2015-09-10T11:37:40+08:00</updated>
    <id>http://mzkmzk.github.io/blog/2015/09/10/android_adb_order</id>
    <content type="html"><![CDATA[<ol>
<li>adb device 显示连接的设备</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AndroidStudio技巧]]></title>
    <link href="http://mzkmzk.github.io/blog/2015/09/07/AS_kill/"/>
    <updated>2015-09-07T11:37:40+08:00</updated>
    <id>http://mzkmzk.github.io/blog/2015/09/07/AS_kill</id>
    <content type="html"><![CDATA[<h3>0x00 AS的提示总结</h3>

<ol>
<li><code>command+O</code>:显示当前文件所有函数</li>
<li><code>command+I</code>:显示接口文件的所有函数</li>
<li><code>ctrl+option+space</code>:补全提示</li>
<li><code>command+N</code>:一些可以自动生成的代码例如get,set</li>
<li><code>command+option+W</code>:可以快速定位视图</li>
<li><code>command+option+Z</code>:选择使用快速生成ifelse/Runable等代码</li>
<li><code>control+option+上/下</code>:搜索选定单词的下个位置</li>
<li><code>control+shift+/</code>:多行注释</li>
<li><code>control+Q</code>:返回上一个修改的光标处</li>
<li><code>command+E</code>:选择文件</li>
<li><code>control+shitf+J</code>:两行合为一行</li>
<li><code>commnad+option+V</code>:移动当前文件之&hellip;</li>
<li><code>command+option+O</code>:搜索特定的方法</li>
<li><code>control+'(1旁边)</code>:切换变成模式</li>
<li><code>command+3</code>:查找制定action</li>
<li><code>command+1</code>:fix action</li>
<li><code>control+h</code>:全局搜索</li>
<li><code>command+shitf+T</code>搜索class</li>
<li><code>command+shitf+G</code></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android 捕抓异常发送给服务器]]></title>
    <link href="http://mzkmzk.github.io/blog/2015/06/25/android_exception/"/>
    <updated>2015-06-25T21:28:46+08:00</updated>
    <id>http://mzkmzk.github.io/blog/2015/06/25/android_exception</id>
    <content type="html"><![CDATA[<!--more-->


<p>在任何服务性行业中,用户遇到的问题,我们就要解决
所以app也要捕抓到用户在使用过程中的bug</p>

<p>他们就是我们的测试人员</p>

<p>本文中讲两部分,一部分是被我们捕抓到的异常,另一部分是我们没有捕抓到的,从而导致app奔溃的异常。</p>

<p>异常最终都写入log.我把log放在可访问的地方,在浏览器输入地址即可查看</p>

<p>效果如:</p>

<pre><code>用户 ID: null it is UncaughtExceptionHandler
2015-06-25-22:21class: com.tjrac.activity._0.LoginActivity$AndroidUser_Login; method: run; line: 141;  Exception: java.lang.NullPointerException
2015-06-25-22:21class: java.lang.Thread; method: run; line: 1019;  Exception: java.lang.NullPointerException


用户 ID: null it is UncaughtExceptionHandler
2015-06-25-22:22class: com.tjrac.activity._0.LoginActivity$AndroidUser_Login; method: run; line: 141;  Exception: java.lang.NullPointerException
2015-06-25-22:22class: java.lang.Thread; method: run; line: 1019;  Exception: java.lang.NullPointerException
</code></pre>

<h3>0x00 服务器接受异常数据</h3>

<p>无论是我们捕抓或是没捕抓到的异常,服务器接受的方法都一样,写入一个.log文件中.我用的是Struts2框架</p>

<pre><code>public class PrintException implements Action {

@Override
public String execute() throws Exception {
    HttpServletRequest request =ServletActionContext.getRequest();
    request.getContextPath();
    File file =new File(ServletActionContext.getServletContext().getRealPath("/log")+"/Exception.log");
    System.out.println(file.getPath());
    PrintWriter pw =new PrintWriter(new OutputStreamWriter(new FileOutputStream(file,true),"UTF-8"),true);
    pw.println("用户 ID: "+request.getParameter("cert_id"));
    pw.println(request.getParameter("exception"));
    pw.println();
    pw.close();
    return null;
}
</code></pre>

<h3>0x01 发送被我们捕抓到的异常</h3>

<p>这个就相对简单直接在捕抓异常后面加一个处理语句.题外话,可不可以重写捕抓异常的方法,然后捕抓异常后会自动发送异常给服务器.</p>

<p>在捕抓到异常后调用sendException方法,我这里多给了一个Context,因为要获取到用户的id 然后方便处理异常.</p>

<pre><code>public static void sendException(Context context,Exception exception){
    List&lt;NameValuePair&gt; params = new ArrayList&lt;NameValuePair&gt;();
    params.add(new BasicNameValuePair("cert_id", context
            .getSharedPreferences("user", 0).getString("cert_id", null)));
    params.add(new BasicNameValuePair("exception",ExceptionToString(exception)));
    ModelServer modelHttp = new ModelServer();
    modelHttp.Model_server(params, "PrintException");
}

/**
 * 将Exception 转为String
 * @param exception
 * @return
 */
public static String ExceptionToString(Exception exception ){
    StringWriter sw = new StringWriter();
    PrintWriter pw =new PrintWriter(sw);
    pw.println("异常发生时间 : "+getSystemTime_Minute());
    exception.printStackTrace(pw);
    pw.close();
    return sw.toString();
}
</code></pre>

<h3>0x02 设置捕抓全局异常</h3>

<p>这里写了一个捕抓的Handler 通常不用大改,一般只改getTraceInfo()方法。</p>

<pre><code>import java.io.File;
import java.io.FileOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.lang.Thread.UncaughtExceptionHandler;
import java.lang.reflect.Field;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Map.Entry;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.http.NameValuePair;
import org.apache.http.message.BasicNameValuePair;

import android.annotation.SuppressLint;
import android.content.Context;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.os.Build;
import android.os.Environment;
import android.os.Looper;
import android.util.Log;
import android.widget.Toast;

/**
 * UncaughtException处理类,当程序发生Uncaught异常的时候,有该类来接管程序,并记录发送错误报告.
 * 
 * @author user 
 */
@SuppressLint("SdCardPath")
public class CrashHandler implements UncaughtExceptionHandler {

public static final String TAG = "TEST";

// CrashHandler 实例
private static CrashHandler INSTANCE = new CrashHandler();

// 程序的 Context 对象
private Context mContext;

// 系统默认的 UncaughtException 处理类
private Thread.UncaughtExceptionHandler mDefaultHandler;

// 用来存储设备信息和异常信息
private Map&lt;String, String&gt; infos = new HashMap&lt;String, String&gt;();

// 用来显示Toast中的信息
private static String error = "程序错误，额，不对，我应该说，服务器正在维护中，请稍后再试";

private static final Map&lt;String, String&gt; regexMap = new HashMap&lt;String, String&gt;();

// 用于格式化日期,作为日志文件名的一部分
private DateFormat formatter = new SimpleDateFormat("yyyy-MM-dd-HH-mm-ss",
        Locale.CHINA);

/** 保证只有一个 CrashHandler 实例 */
private CrashHandler() {
    //
}

/** 获取 CrashHandler 实例 ,单例模式 */
public static CrashHandler getInstance() {
    initMap();
    return INSTANCE;
}

/**
 * 初始化
 * 
 * @param context
 */
public void init(Context context) {
    mContext = context;

    // 获取系统默认的 UncaughtException 处理器
    mDefaultHandler = Thread.getDefaultUncaughtExceptionHandler();

    // 设置该 CrashHandler 为程序的默认处理器
    Thread.setDefaultUncaughtExceptionHandler(this);
    Log.d("TEST", "Crash:init");
}

/**
 * 当 UncaughtException 发生时会转入该函数来处理
 */
@Override
public void uncaughtException(Thread thread, Throwable ex) {
    if (!handleException(ex) &amp;&amp; mDefaultHandler != null) {
        // 如果用户没有处理则让系统默认的异常处理器来处理
        mDefaultHandler.uncaughtException(thread, ex);
        Log.d("TEST", "defalut");
    } else {
        try {
            Thread.sleep(3000);
        } catch (InterruptedException e) {
            Log.e(TAG, "error : ", e);
        }
        // 退出程序
        android.os.Process.killProcess(android.os.Process.myPid());
        // mDefaultHandler.uncaughtException(thread, ex);
        System.exit(1);
    }
}

/**
 * 自定义错误处理，收集错误信息，发送错误报告等操作均在此完成
 * 
 * @param ex
 * @return true：如果处理了该异常信息；否则返回 false
 */
private boolean handleException(Throwable ex) {
    if (ex == null) {
        return false;
    }

    // 收集设备参数信息
    // collectDeviceInfo(mContext);
    // 保存日志文件
    saveCrashInfo2File(ex);
    // 使用 Toast 来显示异常信息
    new Thread() {
        @Override
        public void run() {
            Looper.prepare();
            Toast.makeText(mContext, error, Toast.LENGTH_LONG).show();
            Looper.loop();
        }
    }.start();
    return true;
}

/**
 * 收集设备参数信息
 * 
 * @param ctx
 */
public void collectDeviceInfo(Context ctx) {
    try {
        PackageManager pm = ctx.getPackageManager();
        PackageInfo pi = pm.getPackageInfo(ctx.getPackageName(),
                PackageManager.GET_ACTIVITIES);

        if (pi != null) {
            String versionName = pi.versionName == null ? "null"
                    : pi.versionName;
            String versionCode = pi.versionCode + "";
            infos.put("versionName", versionName);
            infos.put("versionCode", versionCode);
        }
    } catch (NameNotFoundException e) {
        Log.e(TAG, "an error occured when collect package info", e);
    }

    Field[] fields = Build.class.getDeclaredFields();
    for (Field field : fields) {
        try {
            field.setAccessible(true);
            infos.put(field.getName(), field.get(null).toString());
            Log.d(TAG, field.getName() + " : " + field.get(null));
        } catch (Exception e) {
            Log.e(TAG, "an error occured when collect crash info", e);
        }
    }
}

/**
 * 保存错误信息到文件中 *
 * 
 * @param ex
 * @return 返回文件名称,便于将文件传送到服务器
 */
private String saveCrashInfo2File(Throwable ex) {
    StringBuffer sb = getTraceInfo(ex);
    Writer writer = new StringWriter();
    PrintWriter printWriter = new PrintWriter(writer);
    ex.printStackTrace(printWriter);
    Throwable cause = ex.getCause();
    while (cause != null) {
        cause.printStackTrace(printWriter);
        cause = cause.getCause();
    }
    printWriter.close();

    String result = writer.toString();
    sb.append(result);
    try {
        long timestamp = System.currentTimeMillis();
        String time = formatter.format(new Date());
        String fileName = "crash-" + time + "-" + timestamp + ".log";

        if (Environment.getExternalStorageState().equals(
                Environment.MEDIA_MOUNTED)) {
            String path = Environment.getExternalStorageDirectory()
                    + "/crash/";
            File dir = new File(path);
            if (!dir.exists()) {
                dir.mkdirs();
            }
            FileOutputStream fos = new FileOutputStream(path + fileName);
            fos.write(sb.toString().getBytes());
            fos.close();
        }

        return fileName;
    } catch (Exception e) {
        Log.e(TAG, "an error occured while writing file...", e);
    }

    return null;
}

/**
 * 整理异常信息
 * @param e
 * @return
 */
public static StringBuffer getTraceInfo(Throwable exception) {
     /*
    StringBuffer sb = new StringBuffer();

    Throwable ex = e.getCause() == null ? e : e.getCause();
    StackTraceElement[] stacks = ex.getStackTrace();
    for (int i = 0; i &lt; stacks.length; i++) {
        if (i == 0) {
            setError(ex.toString());
        }
        sb.append(Utils.getSystemTime_Minute()).append("class: ").append(stacks[i].getClassName())
                .append("; method: ").append(stacks[i].getMethodName())
                .append("; line: ").append(stacks[i].getLineNumber())
                .append(";  Exception: ").append(ex.toString() + "\n");
    }

    Log.d(TAG, sb.toString());
    */
    List&lt;NameValuePair&gt; params = new ArrayList&lt;NameValuePair&gt;();
    params.add(new BasicNameValuePair("cert_id", "null it is UncaughtExceptionHandler"));
    params.add(new BasicNameValuePair("exception",Utils.ThrowableToString(exception)));
    ModelServer modelHttp = new ModelServer();
    modelHttp.Model_server(params, "PrintException");
    return new StringBuffer(Utils.ThrowableToString(exception));
}

/**
 * 设置错误的提示语
 * @param e
 */
public static void setError(String e) {
    Pattern pattern;
    Matcher matcher;
    for (Entry&lt;String, String&gt; m : regexMap.entrySet()) {
        Log.d(TAG, e+"key:" + m.getKey() + "; value:" + m.getValue());
        pattern = Pattern.compile(m.getKey());
        matcher = pattern.matcher(e);
        if(matcher.matches()){
            error = m.getValue();
            break;
        }
    }
}

/**
 * 初始化错误的提示语
 */
private static void initMap() {
    // Java.lang.NullPointerException
    // java.lang.ClassNotFoundException
    // java.lang.ArithmeticException
    // java.lang.ArrayIndexOutOfBoundsException
    // java.lang.IllegalArgumentException
    // java.lang.IllegalAccessException
    // SecturityException
    // NumberFormatException
    // OutOfMemoryError 
    // StackOverflowError 
    // RuntimeException 
    regexMap.put(".*NullPointerException.*", "嘿，无中生有~Boom!");
    regexMap.put(".*ClassNotFoundException.*", "你确定你能找得到它？");
    regexMap.put(".*ArithmeticException.*", "我猜你的数学是体育老师教的，对吧？");
    regexMap.put(".*ArrayIndexOutOfBoundsException.*", "恩，无下限=无节操，请不要跟我搭话");
    regexMap.put(".*IllegalArgumentException.*", "你的出生就是一场错误。");
    regexMap.put(".*IllegalAccessException.*", "很遗憾，你的信用卡账号被冻结了，无权支付");
    regexMap.put(".*SecturityException.*", "死神马上降临");
    regexMap.put(".*NumberFormatException.*", "想要改变一下自己形象？去泰国吧，包你满意");
    regexMap.put(".*OutOfMemoryError.*", "或许你该减减肥了");
    regexMap.put(".*StackOverflowError.*", "啊，啊，憋不住了！");
    regexMap.put(".*RuntimeException.*", "你的人生走错了方向，重来吧");

}

}
</code></pre>

<p>再写一个启动这个Handler的全局类</p>

<pre><code>import android.app.Application;

public class CrashApplication extends Application {

@Override
public void onCreate() {
    super.onCreate();
    CrashHandler crashHandler = CrashHandler.getInstance();
    crashHandler.init(getApplicationContext());
}

}
</code></pre>

<p>然后在AndroidManifest.xml注册下这个全局类</p>

<pre><code> &lt;application
 android:name="com.tjrac.utils.CrashApplication"...&gt;
</code></pre>

<h3>参考资料</h3>

<p>捕抓全局异常<a href="http://www.cnblogs.com/cpacm/p/3948991.html">http://www.cnblogs.com/cpacm/p/3948991.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android 版本升级实现]]></title>
    <link href="http://mzkmzk.github.io/blog/2015/06/23/android_version/"/>
    <updated>2015-06-23T21:28:46+08:00</updated>
    <id>http://mzkmzk.github.io/blog/2015/06/23/android_version</id>
    <content type="html"><![CDATA[<!--more-->


<p>项目中版本更新是不可或缺的功能</p>

<p><img src="images/blog/2015-06-24-01.png" alt="展示图" /></p>

<h3>0x00配置Config</h3>

<p>这里主要配置的是4个final属性 还有的就是获取新版信息的路径,返回的是一个json 如</p>

<p><code>{"version":{"apkname":"Tjrac_lib.apk","appname":"Tjrac_lib","verCode":"2","verName":"1.0.1"}}</code></p>

<p>然后存放新版apk在UPDATE_APKNAME路径上~</p>

<pre><code>import com.tjrac.R;

import android.content.Context;
import android.content.pm.PackageManager.NameNotFoundException;
import android.util.Log;

public class Config {
private static final String TAG = "Config";
/**
 * 服务器存放的apk路径
 */
public static final String UPDATE_SERVER = "http://192.168.0.101:8080/NFC_Library/";

/**
 * 新版apk存在服务器的路径和名称
 */
public static final String UPDATE_APKNAME = "Tjrac_lib.apk";

/**
 * 获取版本信息的访问路径
 */
public static final String UPDATE_VERJSON = "LIB/LIB_AndroidUser_Version_Update";

/**
 * 保存在sdk内的新版apk名称
 */
public static final String UPDATE_SAVENAME = "Tjrac_lib.apk";

public static int getVerCode(Context context) {
    int verCode = -1;
    try {
        verCode = context.getPackageManager().getPackageInfo(
                "com.tjrac", 0).versionCode;
        System.out.println("版本号为 : "+verCode);
    } catch (NameNotFoundException e) {
        Log.e(TAG, e.getMessage());
    }
    return verCode;
}

public static String getVerName(Context context) {
    String verName = "";
    try {
        verName = context.getPackageManager().getPackageInfo(
                "com.tjrac", 0).versionName;
        System.out.println("版本名称为 : "+verName);
    } catch (NameNotFoundException e) {
        Log.e(TAG, e.getMessage());
    }
    return verName;
}

public static String getAppName(Context context) {
    String verName = context.getResources().getText(R.string.app_name)
            .toString();
    return verName;
}
}
</code></pre>

<h3>0x01 更新操作类 Update</h3>

<p>getServerVerCode():获取新版本信息
Select_Version():比较新旧版本号
notNewVersionShow():版本号一致无需更新
doNewVersionUpdate():更新版本
downFile(final String url):下载新版本
down():下载完成,取消提示框
update():安装新版本</p>

<pre><code>import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;
import org.json.JSONObject;

import com.tjrac.R;
import com.tjrac.activity.base.BaseActivity;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.Dialog;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.os.Environment;
import android.os.Handler;

public class Update  extends Activity{
private static final String TAG = "Update";
public ProgressDialog pBar;
private Handler handler = new Handler();
private Handler handler_Select_Version =new Handler();
private int newVerCode = 0;
private String newVerName = "";
private Context context;

public Update(Context context){
    this.context=context;
}

public boolean getServerVerCode() {
    new Thread() {
        public void run() {
            try {
                String verjson = NetworkTool.getContent(Config.UPDATE_SERVER
                        + Config.UPDATE_VERJSON);
                System.out.println("getServerVerCode : " +Config.UPDATE_SERVER + Config.UPDATE_VERJSON);
                System.out.println("获取新的版本号 json : " +verjson );
                JSONObject json_msg = new JSONObject(verjson);
                JSONObject obj = json_msg.getJSONObject("version");
                    try {
                        newVerCode = Integer.parseInt(obj.getString("verCode"));
                        System.out.println("json 解析的新 版本 号 newVerCode为 : "+ newVerCode);
                        newVerName = obj.getString("verName");
                        System.out.println("json 解析的新 版本 名称 newVerName为 : "+ newVerName);
                        Select_Version();
                    } catch (Exception e) {
                        newVerCode = -1;
                        newVerName = "";
                        e.printStackTrace();
                    }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }.start();

    return true;
}

void Select_Version(){
    handler_Select_Version.post(new Runnable() {
        public void run() {
            int vercode = Config.getVerCode(context);
            System.out.println("获取新版本号后 为 新版本为 : "+ newVerCode +"  旧版本号为 : "+vercode);
            if (newVerCode &gt; vercode) {
                doNewVersionUpdate();
            } else {
                notNewVersionShow();
            }
        }
    });
}

private void notNewVersionShow() {
    int verCode = Config.getVerCode(context);
    String verName = Config.getVerName(context);
    StringBuffer sb = new StringBuffer();
    sb.append("当前版本:");
    sb.append(verName);
    sb.append(" Code:");
    sb.append(verCode);
    sb.append(",\n已是最新版,⽆无需更新!");
    Dialog dialog = new AlertDialog.Builder(context)
            .setTitle("软件更新").setMessage(sb.toString())// 设置内容
            .setPositiveButton("确定",// 设置确定按钮
                    new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog,
                                int which) {
                            finish();
                        }
                    }).create();// 创建 // 显⽰示对话框
    dialog.show();
}

private void doNewVersionUpdate() {
    int verCode = Config.getVerCode(context);
    String verName = Config.getVerName(context);
    StringBuffer sb = new StringBuffer();
    sb.append("当前版本:");
    sb.append(verName);
    sb.append(" Code:");
    sb.append(verCode);
    sb.append(", 发现新版本:");
    sb.append(newVerName);
    sb.append(" Code:");
    sb.append(newVerCode);
    sb.append(", 是否更新?");
    Dialog dialog = new AlertDialog.Builder(context)
            .setTitle("软件更新")
            .setMessage(sb.toString())
            // 设置内容
            .setPositiveButton("更新",// 设置确定按钮
                    new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog,
                                int which) {
                            pBar = new ProgressDialog(context);
                            pBar.setTitle("正在下载");
                            pBar.setMessage("请稍候...");
                            pBar.setProgressStyle(ProgressDialog.STYLE_SPINNER);
                            downFile(Config.UPDATE_SERVER
                                    + Config.UPDATE_APKNAME);
                            System.out.println("更新版本下载地址 : "+Config.UPDATE_SERVER+ Config.UPDATE_APKNAME );
                        }
                    })
            .setNegativeButton("暂不更新",
                    new DialogInterface.OnClickListener() {
                        public void onClick(DialogInterface dialog,
                                int whichButton) {
                            // 点击"取消"按钮之后退出程序 finish();
                        }
                    }).create();// 创建
    // 显⽰示对话框
    dialog.show();
}

void downFile(final String url) {
    pBar.show();
    new Thread() {
        public void run() {
            HttpClient client = new DefaultHttpClient();
            HttpGet get = new HttpGet(url);
            HttpResponse response;
            try {
                response = client.execute(get);
                HttpEntity entity = response.getEntity();
                long length = entity.getContentLength();
                InputStream is = entity.getContent();
                FileOutputStream fileOutputStream = null;
                if (is != null) {
                    File file = new File(
                            Environment.getExternalStorageDirectory(),
                            Config.UPDATE_SAVENAME);
                    fileOutputStream = new FileOutputStream(file);
                    byte[] buf = new byte[1024];
                    int ch = -1;
                    int count = 0;
                    while ((ch = is.read(buf)) != -1) {
                        fileOutputStream.write(buf, 0, ch);
                        count += ch;
                        if (length &gt; 0) {
                        }
                    }
                }
                fileOutputStream.flush();
                if (fileOutputStream != null) {
                    fileOutputStream.close();
                }
                down();
            } catch (ClientProtocolException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }.start();
}

void down() {
    handler.post(new Runnable() {
        public void run() {
            pBar.cancel();
            update();
        }
    });
}

void update() {
    Intent intent = new Intent(Intent.ACTION_VIEW);
    intent.setDataAndType(Uri.fromFile(new File(Environment
            .getExternalStorageDirectory(), Config.UPDATE_SAVENAME)),
            "application/vnd.android.package-archive");
    context.startActivity(intent);
}
}
</code></pre>

<h3>网络辅助类 NetworkTool</h3>

<pre><code>import java.io.BufferedReader;
import java.io.InputStreamReader;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.params.HttpConnectionParams;
import org.apache.http.params.HttpParams;

public class NetworkTool {
/**
 * 获取⺴⽹网址内容
 * 
 * @param url
 * @return
 * @throws Exception
 */
public static String getContent(String url) throws Exception {
    StringBuilder sb = new StringBuilder();
    HttpClient client = new DefaultHttpClient();
    HttpParams httpParams = client.getParams();
    // 设置⺴⽹网络超时参数 HttpConnectionParams.setConnectionTimeout(httpParams,
    // 3000);
    HttpConnectionParams.setSoTimeout(httpParams, 5000);
    HttpResponse response = client.execute(new HttpGet(url));
    HttpEntity entity = response.getEntity();
    if (entity != null) {
        BufferedReader reader = new BufferedReader(new InputStreamReader(
                entity.getContent(), "UTF-8"), 8192);
        String line = null;
        while ((line = reader.readLine()) != null) {
            sb.append(line + "\n");
        }
        reader.close();
    }
    return sb.toString();
}
}
</code></pre>

<h3>调用更新方法</h3>

<p>在当前的activity中</p>

<pre><code>Update update =new Update(Sy_Activity.this);
update.getServerVerCode();
</code></pre>

<h1>参考链接</h1>

<p><a href="http://blog.csdn.net/xjanker2/article/details/6303937">http://blog.csdn.net/xjanker2/article/details/6303937</a></p>

<p><a href="https://code.google.com/p/androidex/source/browse/trunk/jtapp-12-updateapksamples/">https://code.google.com/p/androidex/source/browse/trunk/jtapp-12-updateapksamples/</a></p>
]]></content>
  </entry>
  
</feed>
